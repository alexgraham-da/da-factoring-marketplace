module Utils where

import DA.Foldable hiding (elem, null)
import DA.Action
import Daml.Trigger

type ContractPair a = (ContractId a, a)

doOrDefer : Bool -> Text -> (TriggerA s a) -> TriggerA s ()
doOrDefer False txt fn = void $ debug $ ("Assert failed, deffering: " <> txt)
doOrDefer True txt fn = debug txt >> void $ fn

-- exerciseAll : (Template t, Choice t c r, Eq c, Show c, Show t) => [(ContractId t,t)] -> c ->  TriggerA s ()
-- exerciseAll cps c = mapA_ (\(cid,t) -> dedupExercise cid c >> debug (show c <> ": " <> show t)) cps

mapExercise : (Choice t c r, Eq c, Show c, Show n) => c -> (t -> n) -> [(ContractId t,t)] -> TriggerA s ()
mapExercise c acc cps = mapA_ (\(cid,t) -> dedupExercise cid c >> debug (show c <> ": " <> show (acc t))) cps

-- |Helper function to exercise a choice
emitExerciseCmd : (Template t, Choice t c r) => ContractId t -> c -> TriggerA s CommandId
emitExerciseCmd cid c = emitCommands [exerciseCmd cid c] [toAnyContractId cid]

mergeRegisteredTemplates : RegisteredTemplates -> RegisteredTemplates -> RegisteredTemplates
mergeRegisteredTemplates AllInDar _                                        = AllInDar
mergeRegisteredTemplates _        AllInDar                                 = AllInDar
mergeRegisteredTemplates (RegisteredTemplates xs) (RegisteredTemplates ys) = RegisteredTemplates (xs <> ys)
