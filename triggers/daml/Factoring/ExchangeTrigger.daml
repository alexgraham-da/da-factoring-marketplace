module Factoring.ExchangeTrigger where

import Marketplace.Exchange
import Marketplace.ExchangeParticipant  hiding (buyer, price)
import Marketplace.Trading hiding (buyer, price)

import Factoring.Onboarding
import Factoring.Invoice

import DA.List
import DA.Action
import DA.Optional
import DA.Foldable hiding (null)
import DA.Next.Set (Set)
import qualified DA.Next.Set as Set
import Daml.Trigger
import Utils

type CurrentOrderId = Int

getRegisteredTemplates : RegisteredTemplates
getRegisteredTemplates = RegisteredTemplates
  [ registeredTemplate @CreateAuctionRequest
  , registeredTemplate @Bid
  , registeredTemplate @FactoringExchangeInvitation
  , registeredTemplate @ExchangeParticipant
  , registeredTemplate @ExchangeParticipantInvitationRequest
  , registeredTemplate @Exchange
  , registeredTemplate @TradeSide
  -- , registeredTemplate @Order
  , registeredTemplate @OrderRequest
  , registeredTemplate @OrderCancelRequest
  , registeredTemplate @Auction ]

handleExchange : Trigger CurrentOrderId
handleExchange = Trigger
  { initialize = return 0
  , updateState = \_ -> pure ()
  , rule = handleExchangeRule
  , registeredTemplates = getRegisteredTemplates
  , heartbeat = None
  }


handleExchangeRule : Party -> TriggerA CurrentOrderId ()
handleExchangeRule party = do
  exchanges <- filter (\(_,e) -> e.exchange == party) <$> query @Exchange

  -- > Accept exchange invitations
  invitations <- query @FactoringExchangeInvitation
  mapExercise FactoringExchangeInvitation_Accept
    { name = "Exchange", location = "" }
    (.operator) invitations

  -- > Accept participant invitation requests
  exchangeInvitationRequests <- query @ExchangeParticipantInvitationRequest
  unless (null exchangeInvitationRequests) $ doOrDefer (not $ null exchanges) "accept participant invite requests"
    $ mapExercise ExchangeParticipantInvitationRequest_Accept (.participant) exchangeInvitationRequests

  -- |Accept all 'CreateMarketRequest'
  auctionRequests <- query @CreateAuctionRequest
  mapExercise CreateAuctionRequest_Accept ((.seller) . head . (.invoices)) auctionRequests

  -- |Add all exchange participants to Auction observers
  auctions <- query @Auction
  participants <- Set.fromList . map ((\ep -> ep.exchParticipant) . snd) <$> query @ExchangeParticipant
  forA_ auctions (handleAuction party participants)

  -- > Add bids for all orders
  orders <- query @OrderRequest
  forA_ orders (handleOrderRequest party)

  -- > Remove bids for all cancel requests
  cancels <- query @OrderCancelRequest
  forA_ cancels (handleOrderCancelRequest party)

  -- > Settle all trade sides
  tradeSides <- query @TradeSide
  mapExercise TradeSide_Settle show tradeSides

  return ()

handleAuction : Party ->  Set Party -> (ContractId Auction, Auction) -> TriggerA Int ()
handleAuction party participants (auctionCid, auction) = do
  let newObservers = Set.difference participants auction.observers
  unless (Set.null newObservers)
    $ void $ dedupExercise auctionCid Auction_AddObservers with newObservers
          >> debug ("Adding observers to auction: " <> show newObservers)

handleOrderCancelRequest : Party -> (ContractId OrderCancelRequest, OrderCancelRequest) -> TriggerA Int ()
handleOrderCancelRequest party (cancelRequestCid, cancelRequest) = do
  debug $ "canceling order: " <> show cancelRequest
  let order = cancelRequest.order

  (auctionCid,auction) <- fromSomeNote "query auction order cancel" <$> queryContractKey @Auction order.pair._1
  optBid <- queryContractKey @Bid (party,order.orderId)
  case optBid of
    (Some (bidCid,bid)) -> do
      debug "canceling bid..."
      dedupExercise auctionCid Auction_RemoveBid with bidCid
      -- emitCommands [ exerciseCmd auctionCid Auction_RemoveBid with bid
      --              , exerciseCmd bidCid Archive ] [ toAnyContractId auctionCid, toAnyContractId bidCid ]
      return ()
    None -> return ()
  emitCommands [exerciseCmd cancelRequestCid OrderCancel_Ack] [toAnyContractId cancelRequestCid]
  return ()

handleOrderRequest : Party -> (ContractId OrderRequest, OrderRequest) -> TriggerA Int ()
handleOrderRequest party (orderRequestCid, orderRequest)
  | not $ orderRequest.order.isBid = return ()
  | otherwise = do
    let order = orderRequest.order
    debug $ "Handling order request for: " <> show orderRequest.order.exchParticipant

    -- > Acknowledge order
    currentId <- get
    -- dedupExercise orderRequestCid OrderRequest_Ack with orderId = currentId
    emitExerciseCmd orderRequestCid OrderRequest_Ack with orderId = currentId

    -- > Create a 'Bid'
    (auctionCid,auction) <- fromSome <$> queryContractKey @Auction order.pair._1
    dedupExercise auctionCid Auction_AddBid with
          addBuyer = order.exchParticipant
          addPrice = order.price
          addAmount = order.qty
          orderId = currentId

    modify (+1)
    return ()

-- handleTradeSide : Party -> (ContractId TradeSide, TradeSide) -> TriggerA Int ()
-- handleTradeSide party (tradeSideCid, tradeSide) = do
--   dedupExercise tradeSideCid TradeSide_Settle
--   -- when tradeSide.isBuy (updateBid party tradeSide)
--
-- updateBid : Party -> TradeSide -> TriggerA Int ()
-- updateBid party tradeSide = do
--   (auctionCid, auction) <- fromSome <$> queryContractKey @Auction tradeSide.pair._1
--   (bidCid, oldBid) <- fromSome <$> queryContractKey @Bid (party, tradeSide.orderId)
--   dedupExercise bidCid Bid_ChangeStatus with newStatus = BidWon
--   let newBid = oldBid with status = BidWon
--   dedupExercise auctionCid Auction_UpdateBid with bid = oldBid, newBid
