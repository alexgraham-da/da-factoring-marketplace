module Factoring.ExchangeTrigger where

import Marketplace.Exchange
import Marketplace.ExchangeParticipant  hiding (buyer, price)
import Marketplace.Trading hiding (buyer, price)
import Factoring.Invoice

import DA.Action
import DA.Optional
import DA.Foldable hiding (null)
import DA.Next.Set (Set)
import qualified DA.Next.Set as Set
import Daml.Trigger
import Utils

import qualified ExchangeTrigger

type CurrentOrderId = Int

getRegisteredTemplates : RegisteredTemplates
getRegisteredTemplates = RegisteredTemplates
  [ registeredTemplate @CreateAuctionRequest
  , registeredTemplate @ExchangeParticipant
  , registeredTemplate @ExchangeParticipantInvitationRequest
  , registeredTemplate @Exchange
  -- , registeredTemplate @Order
  , registeredTemplate @OrderRequest
  , registeredTemplate @Auction ]

handleExchange : Trigger CurrentOrderId
handleExchange = Trigger
  { initialize = return 0
  , updateState = \_ -> pure ()
  , rule = handleExchangeRule
  , registeredTemplates = mergeRegisteredTemplates ExchangeTrigger.handleExchange.registeredTemplates
                                                   getRegisteredTemplates
  , heartbeat = None
  }


handleExchangeRule : Party -> TriggerA CurrentOrderId ()
handleExchangeRule party = do
  debug "Running handleExchangeRule"

  exchanges <- filter (\(_,e) -> e.exchange == party) <$> query @Exchange

  exchangeInvitationRequests <- query @ExchangeParticipantInvitationRequest
  forA_ exchangeInvitationRequests
    $ \(cid,_) ->
      if not $ null exchanges
      then emitExerciseCmd cid ExchangeParticipantInvitationRequest_Accept
        >> debug "Accepting exchange participant invitation request"
      else debug "No Exchange contract, deffering participant invitation request"

  -- |Accept all 'CreateMarketRequest'
  auctionRequests <- query @CreateAuctionRequest
  forA_ auctionRequests
    $ \(cid,_) -> emitExerciseCmd cid CreateAuctionRequest_Accept
               >> debug "Accepting Create Auction Request"

  -- |Add all exchange participants to Auction observers
  auctions <- query @Auction
  participants <- Set.fromList . map ((\ep -> ep.exchParticipant) . snd) <$> query @ExchangeParticipant
  forA_ auctions (handleAuction party participants)

  -- > Add bids for all orders
  orders <- query @OrderRequest
  forA_ orders (handleOrderRequest party)

  -- > Remove bids for all cancel requests
  cancels <- query @OrderCancelRequest
  forA_ cancels (handleOrderCancelRequest party)

  tradeSides <- query @TradeSide
  forA_ tradeSides
    $ \(cid,ts) -> emitExerciseCmd cid TradeSide_Settle
                >> debug ("Settling trade side: " <> show ts)


handleAuction : Party ->  Set Party -> (ContractId Auction, Auction) -> TriggerA Int ()
handleAuction party participants (auctionCid, auction) = do
  let newObservers = Set.difference participants auction.observers
  unless (Set.null newObservers)
    $ void $ dedupExercise auctionCid Auction_AddObservers with newObservers
          >> debug ("Adding observers to auction: " <> show newObservers)


handleOrderCancelRequest : Party -> (ContractId OrderCancelRequest, OrderCancelRequest) -> TriggerA Int ()
handleOrderCancelRequest party (cancelRequestCid, cancelRequest) = do
  let order = cancelRequest.order
  (auctionCid,auction) <- fromSome <$> queryContractKey @Auction order.pair._1
  (bidCid,bid) <- fromSome <$> queryContractKey @Bid (party,order.orderId)
  emitExerciseCmd auctionCid Auction_RemoveBid with bid
  emitCommands [exerciseCmd bidCid Archive] [toAnyContractId bidCid]
  emitExerciseCmd cancelRequestCid OrderCancel_Ack
  return ()


handleOrderRequest : Party -> (ContractId OrderRequest, OrderRequest) -> TriggerA Int ()
handleOrderRequest party (orderRequestCid, orderRequest)
  | not $ orderRequest.order.isBid = return () -- auction handled manually
  | otherwise = do
    let order = orderRequest.order
    debug $ "Handling order request: " <> show orderRequest

    -- > Acknowledge order
    currentId <- get
    emitExerciseCmd orderRequestCid OrderRequest_Ack with orderId = currentId

    -- > Create a 'Bid'
    (auctionCid,auction) <- fromSome <$> queryContractKey @Auction order.pair._1
    emitExerciseCmd auctionCid Auction_AddBid with
          addBuyer = order.exchParticipant
          addPrice = order.price
          addAmount = order.qty
          orderId = currentId

    modify (+1)
    return ()

-- handleTradeSide : Party -> (ContractId TradeSide, TradeSide) -> TriggerA Int ()
-- handleTradeSide party (tradeSideCid, tradeSide) = do
--   dedupExercise tradeSideCid TradeSide_Settle
--   -- when tradeSide.isBuy (updateBid party tradeSide)
--
-- updateBid : Party -> TradeSide -> TriggerA Int ()
-- updateBid party tradeSide = do
--   (auctionCid, auction) <- fromSome <$> queryContractKey @Auction tradeSide.pair._1
--   (bidCid, oldBid) <- fromSome <$> queryContractKey @Bid (party, tradeSide.orderId)
--   dedupExercise bidCid Bid_ChangeStatus with newStatus = BidWon
--   let newBid = oldBid with status = BidWon
--   dedupExercise auctionCid Auction_UpdateBid with bid = oldBid, newBid
