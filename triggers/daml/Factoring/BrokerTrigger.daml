module Factoring.BrokerTrigger where

import Daml.Trigger

import Factoring.Invoice
import Factoring.Broker

import Utils
import DA.Foldable (forA_)
import DA.List.Total (groupOn)
import DA.Optional.Total (whenSome)
import qualified DA.Next.Set as Set
import DA.Functor (void)
import DA.Action (unless)

type CurrentId = Int

getRegisteredTemplates : RegisteredTemplates
getRegisteredTemplates = RegisteredTemplates
  [ registeredTemplate @BrokerInvitation
  , registeredTemplate @BrokerCustomerInvitationRequest
  , registeredTemplate @BrokerCustomerBuyer
  , registeredTemplate @Bid ]

handleBroker : Trigger ()
handleBroker = Trigger
  { initialize = return ()
  , updateState = \_ -> pure ()
  , rule = handleBrokerRule
  , registeredTemplates = getRegisteredTemplates
  , heartbeat = None
  }

-- |Accept 'InvoiceDepositRequest'
handleBrokerRule : Party -> TriggerA () ()
handleBrokerRule party = do
  -- Accept 'CSDInvitation'
  -- invitations <- query @BrokerInv
  -- mapExercise CSDInvitation_Accept { name = "CSD", location = "" } (.csd) invitations

  -- Accept all 'DepositTransferRequest'
  brokerCustomerRequests <- query @BrokerCustomerInvitationRequest
  mapExercise BrokerCustomerInvitationRequest_Accept (.brokerCustomer) brokerCustomerRequests

  -- Handle completed bids
  completedBids <- filter (\(_,b) -> isBidStatusComplete b.status && b.onBehalfOf /= party) <$> query @Bid
  let groupedBids = groupOn (.onBehalfOf) $ map snd completedBids
  forA_ groupedBids $ \bs -> handleCompletedBidGroups party bs

handleCompletedBidGroups : Party -> [Bid] -> TriggerA () ()
handleCompletedBidGroups broker []            = return ()
handleCompletedBidGroups broker bids@(bid::_) = do
  debug "handling a completed bid group...."
  optBcb <- queryContractKey @BrokerCustomerBuyer (broker,bid.onBehalfOf)
  whenSome optBcb $ \(bcbCid,bcb) ->
    unless (Set.member bid.orderId bcb.completedBidIds)
      $ void $ dedupExercise bcbCid BrokerCustomerBuyer_AddCompletedBids with bids
  return ()
