module Factoring.CSDTrigger where

import DA.Foldable hiding (elem, null)
import Daml.Trigger

import Factoring.Invoice
import Factoring.Buyer

import qualified CustodianTrigger

import Utils

getRegisteredTemplates : RegisteredTemplates
getRegisteredTemplates = RegisteredTemplates
  [ registeredTemplate @CreateInvoiceRequest
  -- , registeredTemplate @PlaceBidRequest
  , registeredTemplate @CreateExchangeDepositRequest ]

handleCSD : Trigger ()
handleCSD = Trigger
  { initialize = return ()
  , updateState = \_ -> pure ()
  , rule = handleCSDRule
  , registeredTemplates = mergeRegisteredTemplates CustodianTrigger.handleCustodian.registeredTemplates
                                                   getRegisteredTemplates
  , heartbeat = None
  }

-- |Accept 'InvoiceDepositRequest'
handleCSDRule : Party -> TriggerA () ()
handleCSDRule party = do
  -- Run the custodian trigger
  CustodianTrigger.handleCustodianRule party
  -- Accept all 'DepositTransferRequest'
  transferRequests <- query @CreateInvoiceRequest
  forA_ transferRequests
    $ \(cid,_) -> emitExerciseCmd cid CreateInvoiceRequest_Accept
               >> debug "Accepting Invoice Request"

  createDepositRequests <- query @CreateExchangeDepositRequest
  forA_ createDepositRequests
    $ \(cid,_) -> emitExerciseCmd cid CreateExchangeDepositRequest_Accept
               >> debug "Accepting Deposit Request"

  -- placeBidRequests <- query @PlaceBidRequest
  -- forA_ createDepositRequests
  --   $ \(cid,_) -> emitExerciseCmd cid PlaceBidRequest_Review
  --              >> debug "Accepting Deposit Request"
