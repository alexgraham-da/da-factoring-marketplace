module Factoring.CSDTrigger where

import DA.Foldable hiding (elem, null)
import Daml.Trigger

import Factoring.Invoice
import Factoring.Buyer

import Marketplace.Custodian
import Marketplace.Transfer

import Utils

getRegisteredTemplates : RegisteredTemplates
getRegisteredTemplates = RegisteredTemplates
  [ registeredTemplate @DepositTransferRequest
  , registeredTemplate @CustodianRelationshipRequest
  , registeredTemplate @CreateInvoiceRequest
  , registeredTemplate @CreateExchangeDepositRequest ]

handleCSD : Trigger ()
handleCSD = Trigger
  { initialize = return ()
  , updateState = \_ -> pure ()
  , rule = handleCSDRule
  , registeredTemplates = getRegisteredTemplates
  , heartbeat = None
  }

-- |Accept 'InvoiceDepositRequest'
handleCSDRule : Party -> TriggerA () ()
handleCSDRule party = do
  -- Accept all 'DepositTransferRequest'
  transferRequests <- query @CreateInvoiceRequest
  forA_ transferRequests
    $ \(cid,_) -> emitExerciseCmd cid CreateInvoiceRequest_Accept
               >> debug "Accepting Invoice Request"

  createDepositRequests <- query @CreateExchangeDepositRequest
  forA_ createDepositRequests
    $ \(cid,_) -> emitExerciseCmd cid CreateExchangeDepositRequest_Accept
               >> debug "Accepting Deposit Request"

  -- Accept all 'DepositTransferRequest'
  transferRequests <- query @DepositTransferRequest
  forA_ transferRequests
    $ \(cid,_) -> emitExerciseCmd cid DepositTransferRequest_Approve
               >> debug "Accepting transfer request"

  -- Accept all 'CustodianRelationshipRequest'
  relationshipRequests <- query @CustodianRelationshipRequest
  forA_ relationshipRequests
    $ \(cid,rq) -> emitExerciseCmd cid CustodianRelationshipRequest_Approve
               >> debug ("Approving relationship request from " <> show rq.requester)
