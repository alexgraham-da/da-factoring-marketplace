module Factoring.CSDTrigger where

import DA.Action
import DA.List
import DA.Foldable (forA_)
import Daml.Trigger

import Factoring.Invoice hiding (ContractPair)
import Factoring.Buyer
import Factoring.Onboarding

import Marketplace.Custodian
import Marketplace.Transfer

import Utils

type CurrentId = Int

getRegisteredTemplates : RegisteredTemplates
getRegisteredTemplates = RegisteredTemplates
  [ registeredTemplate @Custodian
  , registeredTemplate @CSDInvitation
  , registeredTemplate @DepositTransferRequest
  , registeredTemplate @DepositDebitRequest
  , registeredTemplate @CustodianRelationshipRequest
  , registeredTemplate @CreateInvoiceRequest
  , registeredTemplate @CreateExchangeDepositRequest
  , registeredTemplate @CurrentInvoiceId ]

handleCSD : Trigger CurrentId
handleCSD = Trigger
  { initialize = return 0
  , updateState = \_ -> pure ()
  , rule = handleCSDRule
  , registeredTemplates = getRegisteredTemplates
  , heartbeat = None
  }

-- |Accept 'InvoiceDepositRequest'
handleCSDRule : Party -> TriggerA CurrentId ()
handleCSDRule party = do
  custodians <- query @Custodian

  startIdState <- get

  currentInvoiceIds <- query @CurrentInvoiceId
  let currentId = if null currentInvoiceIds
                  then startIdState
                  else (snd $ head currentInvoiceIds).currentId

  -- Accept 'CSDInvitation'
  invitations <- query @CSDInvitation
  mapExercise CSDInvitation_Accept { name = "CSD", location = "" } (.csd) invitations

  -- Accept all 'DepositTransferRequest'
  invoiceRequests <- query @CreateInvoiceRequest
  forA_ invoiceRequests (acceptInvoiceRequest party)

  depositRequests <- query @CreateExchangeDepositRequest
  mapExercise CreateExchangeDepositRequest_Accept (.buyer) depositRequests

  -- Accept all 'DepositTransferRequest'
  transferRequests <- query @DepositTransferRequest
  mapExercise DepositTransferRequest_Approve (.sender) transferRequests

  -- Accept all 'DepositDebitRequest'
  debitRequests <- query @DepositDebitRequest
  mapExercise DepositDebitRequest_Approve (.owner) debitRequests

  -- Accept all 'CustodianRelationshipRequest'
  relationshipRequests <- query @CustodianRelationshipRequest
  unless (null relationshipRequests) $ doOrDefer (not $ null custodians) "accepting custodian requests"
    $ mapExercise CustodianRelationshipRequest_Approve (.requester) relationshipRequests

  endIdState <- get
  updateCurrentInvoiceId currentInvoiceIds startIdState endIdState

updateCurrentInvoiceId : [ContractPair CurrentInvoiceId] -> Int -> Int -> TriggerA CurrentId ()
updateCurrentInvoiceId [] _ endIdState = dedupCreate CurrentInvoiceId with currentId = endIdState

updateCurrentInvoiceId ((cid,_)::_) startIdState endIdState
  | startIdState != endIdState = dedupExercise cid CurrentInvoiceId_Set with newId = endIdState
  | otherwise                  = return ()

acceptInvoiceRequest : Party -> ContractPair CreateInvoiceRequest -> TriggerA CurrentId ()
acceptInvoiceRequest party (irCid,ir) = do
  currentId <- get
  dedupExercise irCid CreateInvoiceRequest_Accept with invoiceId = currentId
  modify (+1)
