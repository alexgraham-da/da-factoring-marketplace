module Factoring.CSDTrigger where

import DA.Action
import Daml.Trigger

import Factoring.Invoice
import Factoring.Buyer
import Factoring.Onboarding

import Marketplace.Custodian
import Marketplace.Transfer

import Utils

getRegisteredTemplates : RegisteredTemplates
getRegisteredTemplates = RegisteredTemplates
  [ registeredTemplate @Custodian
  , registeredTemplate @CSDInvitation
  , registeredTemplate @DepositTransferRequest
  , registeredTemplate @CustodianRelationshipRequest
  , registeredTemplate @CreateInvoiceRequest
  , registeredTemplate @CreateExchangeDepositRequest ]

handleCSD : Trigger ()
handleCSD = Trigger
  { initialize = return ()
  , updateState = \_ -> pure ()
  , rule = handleCSDRule
  , registeredTemplates = getRegisteredTemplates
  , heartbeat = None
  }

-- |Accept 'InvoiceDepositRequest'
handleCSDRule : Party -> TriggerA () ()
handleCSDRule party = do
  custodians <- query @Custodian

  -- Accept 'CSDInvitation'
  invitations <- query @CSDInvitation
  mapExercise CSDInvitation_Accept { name = "CSD", location = "" } (.csd) invitations

  -- Accept all 'DepositTransferRequest'
  invoiceRequests <- query @CreateInvoiceRequest
  mapExercise CreateInvoiceRequest_Accept (.seller) invoiceRequests

  depositRequests <- query @CreateExchangeDepositRequest
  mapExercise CreateExchangeDepositRequest_Accept (.buyer) depositRequests

  -- Accept all 'DepositTransferRequest'
  transferRequests <- query @DepositTransferRequest
  mapExercise DepositTransferRequest_Approve (.sender) transferRequests

  -- Accept all 'CustodianRelationshipRequest'
  relationshipRequests <- query @CustodianRelationshipRequest
  unless (null relationshipRequests) $ doOrDefer (not $ null custodians) "accepting custodian requests"
    $ mapExercise CustodianRelationshipRequest_Approve (.requester) relationshipRequests
