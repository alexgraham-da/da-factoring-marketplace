module Factoring.Buyer where

import Marketplace.Token
import Marketplace.ExchangeParticipant
import Marketplace.Trading
import Marketplace.Transfer
import Marketplace.Utils

import Factoring.Invoice
import Factoring.Utils

import DA.List
import DA.Next.Set hiding (null)
import DA.Finance.Asset

import DA.Finance.Types


template FactoringExchange
  with
    operator : Party
    exchange : Party
    csd : Party
    public : Party
  where
    signatory operator
    key (operator, exchange) : (Party, Party)
    maintainer key._1

template Buyer
  with
    operator : Party
    buyer : Party
    csd : Party
    exchange : Party
    public : Party
    observers : Set Party
  where
    signatory operator
    key (operator, buyer) : (Party, Party)
    maintainer key._1
    observer observers

    controller buyer can
      Buyer_AddBroker : ContractId Buyer
        with
          broker : Party
        do
          create this with observers = insert broker observers

      nonconsuming Buyer_PlaceBid : Either (ContractId PlaceBidRequestDenial) (ContractId CreateBidRequest)
        with
          auctionId : Id
          depositCids : [ContractId AssetDeposit]
          bidAmount : Decimal
          auctionAmount : Decimal
        do
          time <- getTime

          (_,auction) <- fetchByKey @Auction auctionId

          assertMsg "Bid must be in correct increments"
            $ ((ceiling auctionAmount) % (ceiling auction.bidIncrement)) == 0

          aggregateQty <- getDepositQuantities depositCids

          if bidAmount > aggregateQty
          then Left <$> create PlaceBidRequestDenial
              with reason = "Not enough funds in account...", ..
          else do

            (exchParticipantId,_) <- fetchByKey @ExchangeParticipant (exchange, operator, buyer)
            (_,auction) <- fetchByKey @Auction auctionId

            mergedCid <- exercise (head depositCids) AssetDeposit_Merge
              with depositCids = tail depositCids

            depositCid <- head <$> exercise mergedCid AssetDeposit_Split
              with quantities = [bidAmount]

            let pair = auction.tokenPair
            orderRequestCid <- exercise exchParticipantId ExchangeParticipant_PlaceBid with pair, depositCid, price = (bidAmount / auctionAmount)
            Right <$> create CreateBidRequest with onBehalfOf = buyer, ..

      nonconsuming Buyer_CancelBid : ContractId OrderCancelRequest
        with
          bid : Bid
        do
          (orderCid,order) <- fetchByKey @Order (exchange,bid.orderId)
          exercise orderCid Order_RequestCancel

      nonconsuming Buyer_RequestWithdraw : ContractId DepositDebitRequest
        with
          depositCids : [ContractId AssetDeposit]
          withdrawalQuantity : Decimal
        do
          assertMsg "withdrawalQuantity must be greater than 0" $ withdrawalQuantity > 0.0
          aggregateQty <- getDepositQuantities depositCids

          assertMsg ("amount should be less than or equal to total deposit amount") $
            withdrawalQuantity <= aggregateQty

          mergedCid <- exercise (head depositCids) AssetDeposit_Merge
            with depositCids = tail depositCids

          depositCid <- head <$> exercise mergedCid AssetDeposit_Split
            with quantities = [ withdrawalQuantity ]

          deposit <- fetch depositCid
          create DepositDebitRequest with
              owner = buyer, ownerAccount = deposit.account, ..

      nonconsuming Buyer_RequestDeposit : ContractId CreateExchangeDepositRequest
        with
          amount : Decimal
        do
          let usdTokenId = getUSDTokenID csd
          create CreateExchangeDepositRequest with
            operator, buyer, csd, exchange
            tokenId = usdTokenId, amount


template PlaceBidRequestDenial
  with
    buyer : Party
    reason : Text
  where
    signatory buyer
    controller buyer can
      PlaceBidRequestDenial_Dismiss : ()
        do return ()


-- |Request to deposit money directly to exchange account
template CreateExchangeDepositRequest
  with
    operator : Party
    buyer : Party
    csd : Party
    exchange : Party
    tokenId : Id
    amount : Decimal
  where
    signatory buyer
    controller csd can
      CreateExchangeDepositRequest_Accept : ContractId AssetDeposit
        do
          (tokenCid, token) <- fetchByKey @Token tokenId
          let receiverAccountId = Id
                with
                    signatories = fromList [csd]
                    label = getAccountLabel buyer exchange
                    version = 0
              asset = Asset with id = tokenId, quantity = amount
              depositObs = fromList $ buyer :: signatory token
          let account = Account with id = receiverAccountId, provider = exchange, owner = buyer

          create AssetDeposit with observers = depositObs, account = account, ..
