module Factoring.Buyer where

import Marketplace.Token
import Marketplace.ExchangeParticipant
import Marketplace.Trading
import Marketplace.Utils

import Factoring.Invoice
import Factoring.Utils

import DA.Next.Set
import DA.Finance.Asset

import DA.Finance.Types


template FactoringExchange
  with
    operator : Party
    exchange : Party
    csd : Party
    public : Party
  where
    signatory operator
    key (operator, exchange) : (Party, Party)
    maintainer key._1

template Buyer
  with
    operator : Party
    buyer : Party
    csd : Party
    exchange : Party
    public : Party
  where
    signatory operator
    key (operator, buyer) : (Party, Party)
    maintainer key._1

    controller buyer can
      nonconsuming Buyer_PlaceBid : ContractId OrderRequest
        with
          auctionId : Id
          depositCid : ContractId AssetDeposit
          price : Decimal
        do
          time <- getTime
          (exchParticipantId,_) <- fetchByKey @ExchangeParticipant (exchange, operator, buyer)
          (_,auction) <- fetchByKey @Auction auctionId

          let pair = auction.tokenPair
          exercise exchParticipantId ExchangeParticipant_PlaceBid with pair, depositCid, price

      nonconsuming Buyer_RequestDeposit : ContractId CreateExchangeDepositRequest
        with
          amount : Decimal
        do
          let usdTokenId = getUSDTokenID csd
          create CreateExchangeDepositRequest with
            operator, buyer, csd, exchange
            tokenId = usdTokenId, amount

-- |Request to deposit money directly to exchange account
template CreateExchangeDepositRequest
  with
    operator : Party
    buyer : Party
    csd : Party
    exchange : Party
    tokenId : Id
    amount : Decimal
  where
    signatory buyer
    controller csd can
      CreateExchangeDepositRequest_Accept : ContractId AssetDeposit
        do
          (tokenCid, token) <- fetchByKey @Token tokenId
          let receiverAccountId = Id
                with
                    signatories = fromList [csd]
                    label = getAccountLabel buyer exchange
                    version = 0
              asset = Asset with id = tokenId, quantity = amount
              depositObs = fromList $ buyer :: signatory token
          let account = Account with id = receiverAccountId, provider = csd, owner = buyer
          create AssetDeposit with observers = depositObs, account = account, ..

