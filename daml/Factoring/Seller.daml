module Factoring.Seller where

import DA.List
import DA.Finance.Asset

import Marketplace.Transfer
import Marketplace.Utils

import Factoring.Invoice

-- |Role contract for the Seller. The seller is a mix of an issuer and an investor
template Seller
  with
    operator : Party
    seller : Party
    csd : Party
    exchange : Party
    public : Party
  where
    signatory operator
    key (operator, seller) : (Party, Party)
    maintainer key._1

    controller seller can
      nonconsuming Seller_AddInvoice : ContractId CreateInvoiceRequest
        with
          payer : Text
          invoiceNumber : Text
          amount : Decimal
          issueDate : Date
          dueDate : Date
        do
          -- > Request that CSD creates an invoice
          create CreateInvoiceRequest with
            operator, csd, seller, exchange, public, payer, initialOwner = seller, included = []
            amount, invoiceNumber, issueDate, dueDate


      nonconsuming Seller_RequestWithdrawl : ContractId DepositDebitRequest
        with
          depositCids : [ContractId AssetDeposit]
          withdrawalQuantity : Decimal
        do
          assertMsg "withdrawalQuantity must be greater than 0" $ withdrawalQuantity > 0.0
          aggregateQty <- getDepositQuantities depositCids

          assertMsg ("amount should be less than or equal to total deposit amount") $
            withdrawalQuantity <= aggregateQty

          mergedCid <- exercise (head depositCids) AssetDeposit_Merge
            with depositCids = tail depositCids

          depositCid <- head <$> exercise mergedCid AssetDeposit_Split
            with quantities = [ withdrawalQuantity ]

          deposit <- fetch depositCid
          create DepositDebitRequest with
              owner = seller, ownerAccount = deposit.account, ..
