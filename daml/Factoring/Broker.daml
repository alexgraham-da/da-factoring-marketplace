module Factoring.Broker where

import DA.List
import qualified DA.Next.Set as Set

import DA.Finance.Types
import DA.Finance.Asset

import Marketplace.Custodian
import Marketplace.Notification
import Marketplace.Trading
import Marketplace.Transfer
import qualified Marketplace.Utils as MU

import Factoring.Registry
import Factoring.Buyer
import Factoring.Invoice
import Factoring.Utils


template BrokerInvitation
  with
    operator : Party
    broker : Party
    csd : Party
    exchange : Party
    public : Party
  where
    signatory operator

    key (operator, broker) : (Party, Party)
    maintainer key._1

    controller broker can
      BrokerInvitation_Accept : ContractId Broker
        with
          firstName : Text
          lastName : Text
          email : Text
          company : Text
        do
          optRegisteredUser <- lookupByKey @RegisteredUser (operator, broker)
          case optRegisteredUser of
            (Some registeredUserCid) -> exercise registeredUserCid RegisteredUser_AddRole with newRole = BrokerRole
            None -> create RegisteredUser with user = broker, roles = [BrokerRole], isPublic = True, ..
          create RegisteredBroker with isPublic = True, ..
          create Broker with ..


template Broker
  with
    operator : Party
    broker : Party
    csd : Party
    exchange : Party
    public : Party
  where
    signatory operator, broker

    key (operator, broker) : (Party, Party)
    maintainer key._2

    controller broker can
      nonconsuming Broker_InviteCustomer : (ContractId BrokerCustomerInvitation)
        with
          brokerCustomer : Party
        do create BrokerCustomerInvitation with isBuyer = True, ..

      nonconsuming Broker_RequestCustodianRelationship : ContractId CustodianRelationshipRequest
       with
         custodian : Party
       do create CustodianRelationshipRequest with requester = broker, role = MU.BrokerRole, ..

      nonconsuming Broker_SendPoolToAuction : (ContractId CreatePoolRequest)
        with
          invoices : [Invoice]
          minimumQuantity : Decimal
          minimumProceeds : Decimal
          bidIncrement : Decimal
          endDate : Time

          -- new invoice info
          invoiceNumber : Text
          issueDate : Date
          dueDate : Date
        do
          let (invoice::rest) = invoices

          exerciseByKey @Invoice (key invoice) Invoice_SendWithPool with
            minimumQuantity
            minimumProceeds
            bidIncrement, endDate
            otherInvoices = rest


template BrokerCustomerInvitation
  with
    operator : Party
    broker : Party
    brokerCustomer : Party
    isBuyer : Bool
  where
    signatory broker

    controller brokerCustomer can
      BrokerCustomerInvitation_Accept : Either (ContractId BrokerCustomerSeller) (ContractId BrokerCustomerBuyer)
        do
          create DismissibleNotification with
            sender = brokerCustomer, senderRole = Some MU.InvestorRole
            receiver = broker, text = "Broker customer invitation accepted."
          if isBuyer
          then do
            exerciseByKey @Buyer (operator,brokerCustomer) Buyer_AddBroker with broker
            Right <$> create BrokerCustomerBuyer with ..
          else do
            Left <$> create BrokerCustomerSeller with ..
      BrokerCustomerInvitation_Reject : ()
        do
          create DismissibleNotification with
            sender = brokerCustomer, senderRole = Some MU.InvestorRole
            receiver = broker, text = "Broker customer invitation rejected."
          return ()

template BrokerCustomerInvitationRequest
  with
    operator : Party
    broker : Party
    brokerCustomer : Party
    isBuyer : Bool
  where
    signatory brokerCustomer

    controller broker can
      BrokerCustomerInvitationRequest_Accept : Either (ContractId BrokerCustomerSeller) (ContractId BrokerCustomerBuyer)
        do
          create DismissibleNotification with
            sender = broker, senderRole = Some MU.BrokerRole
            receiver = broker, text = "Broker customer request accepted."
          if isBuyer
          then do
            exerciseByKey @Buyer (operator,brokerCustomer) Buyer_AddBroker with broker
            Right <$> create BrokerCustomerBuyer with ..
          else do
            Left <$> create BrokerCustomerSeller with ..

template BrokerCustomerSeller
  with
    operator : Party
    broker : Party
    brokerCustomer : Party
  where
    signatory broker, brokerCustomer

    key (broker, operator, brokerCustomer) : (Party, Party, Party)
    maintainer key._1

    controller brokerCustomer can
      nonconsuming BrokerCustomerSeller_SendInvoiceToBroker : ContractId CreateInvoiceRequest
        with
          invoice : Invoice
        do
          let Invoice{..} = invoice
          (invoiceCid,_) <- fetchByKey @Invoice (key invoice)
          assertMsg "Invoice must be auctionable" $ isAuctionable invoice.status
          exercise invoiceCid Invoice_TransferToBroker with broker
          create CreateInvoiceRequest with seller = broker, initialOwner = brokerCustomer, ..

    controller broker can
      nonconsuming BrokerCustomerSeller_TransferFundsToSeller : (ContractId DepositTransferRequest)
        with
          depositCids : [ContractId AssetDeposit]
          transferQuantity : Decimal
        do
          assertMsg "transfer quantity must be greater than 0" $ transferQuantity > 0.0
          aggregateQty <- MU.getDepositQuantities depositCids

          assertMsg ("amount should be less than or equal to total deposit amount") $
            transferQuantity <= aggregateQty

          mergedCid <- exercise (head depositCids) AssetDeposit_Merge
            with depositCids = tail depositCids
          depositCid <- head <$> exercise mergedCid AssetDeposit_Split
            with quantities = [transferQuantity]
          deposit <- fetch depositCid

          let custodian = head $ Set.toList deposit.account.id.signatories
          let receiverAccountId = Id
                with
                  signatories = deposit.account.id.signatories,
                    label = MU.getAccountLabel brokerCustomer custodian,
                    version = 0
          create DepositTransferRequest with
            sender = broker
            senderAccountId = deposit.account.id, ..

      nonconsuming BrokerCustomerSeller_SendInvoiceToAuction : (ContractId CreateAuctionRequest, ContractId Invoice)
        with
          invoice : Invoice
          minimumQuantity : Decimal
          minimumProceeds : Decimal
          bidIncrement : Decimal
          endDate : Time
        do
          exerciseByKey @Invoice (key invoice) Invoice_SendToAuction with ..

template BrokerCustomerBuyer
  with
    operator : Party
    broker : Party
    brokerCustomer : Party
  where
    signatory broker, brokerCustomer

    key (broker, operator, brokerCustomer) : (Party, Party, Party)
    maintainer key._1

    controller broker can

      nonconsuming BrokerCustomerBuyer_PlaceBid : Either (ContractId PlaceBidRequestDenial) (ContractId OrderRequest)
        with
          auctionId : Id
          bidAmount : Decimal
          auctionAmount : Decimal
        do
          (buyerId, buyer) <- fetchByKey @Buyer (operator,brokerCustomer)
          exercise buyerId Buyer_PlaceBid with auctionId, bidAmount, auctionAmount

--r template BrokerCustomer
--   with
--     operator : Party
--     broker : Party
--     brokerCustomer : Party
--     -- depositCids : [ContractId AssetDeposit]
--   where
--     signatory broker, brokerCustomer
--
--     key (broker, operator, brokerCustomer) : (Party, Party, Party)
--     maintainer key._1
--
--     controller brokerCustomer can
--       nonconsuming BrokerCustomer_SendInvoiceToBroker : ContractId CreateInvoiceRequest -- (ContractId Invoice)
--       -- nonconsuming BrokerCustomer_SendInvoiceToBroker : (ContractId Invoice)
--         with
--           invoiceCid : ContractId Invoice
--         do
--
--           Invoice{..} <- fetch invoiceCid
--           -- archive invoiceCid
--           -- create CreateInvoiceRequest with ..
--
--           -- -- create DismissibleNotification with sender = broker, senderRole = Some InvestorRole, receiver = broker, text = "test"
--           exercise invoiceCid Invoice_TransferToBroker with broker
--           create CreateInvoiceRequest with seller = broker, ..
--
--     controller broker can
--       nonconsuming BrokerCustomer_SendInvoiceToAuction : (ContractId CreateAuctionRequest, ContractId Invoice)
--         with
--           invoice : Invoice
--           minimumQuantity : Decimal
--           minimumProceeds : Decimal
--           bidIncrement : Decimal
--           endDate : Time
--         do
--           exerciseByKey @Invoice (key invoice) Invoice_SendToAuction with ..
--
--       nonconsuming BrokerCustomer_PlaceBid : Either (ContractId PlaceBidRequestDenial) (ContractId OrderRequest)
--         with
--           auctionId : Id
--           bidAmount : Decimal
--           auctionAmount : Decimal
--         do
--           (buyerId, buyer) <- fetchByKey @Buyer (operator,brokerCustomer)
--           exercise buyerId Buyer_PlaceBid with auctionId, bidAmount, auctionAmount
