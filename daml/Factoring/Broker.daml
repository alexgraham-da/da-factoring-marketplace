module Factoring.Broker where

import DA.Finance.Types

import Marketplace.Custodian
import Marketplace.Notification
import Marketplace.Trading

import Factoring.Buyer
import Factoring.Invoice

import Marketplace.Utils

import DA.Action
import DA.Optional

template BrokerInvitation
  with
    operator : Party
    broker : Party
    csd : Party
    exchange : Party
    public : Party
  where
    signatory operator

    key (operator, broker) : (Party, Party)
    maintainer key._1

    controller broker can
      BrokerInvitation_Accept : ContractId Broker
        with
          name : Text
          location : Text
        do
          create Broker with ..


template Broker
  with
    operator : Party
    broker : Party
    csd : Party
    exchange : Party
    public : Party
  where
    signatory operator, broker

    key (operator, broker) : (Party, Party)
    maintainer key._2

    controller broker can
      nonconsuming Broker_InviteCustomer : (ContractId BrokerCustomerInvitation)
        with
          brokerCustomer : Party
        do create BrokerCustomerInvitation with isBuyer = True, ..

      nonconsuming Broker_RequestCustodianRelationship : ContractId CustodianRelationshipRequest
       with
         custodian : Party
       do create CustodianRelationshipRequest with requester = broker, role = BrokerRole, ..

      nonconsuming Broker_SendPoolToAuction : (ContractId CreateAuctionRequest)
        with
          invoices : [Invoice]
          minimumQuantity : Decimal
          minimumProceeds : Decimal
          bidIncrement : Decimal
          endDate : Time
        do
          let (invoice::rest) = invoices
          exerciseByKey @Invoice (key invoice) Invoice_SendWithPool with
            minimumQuantity
            minimumProceeds
            bidIncrement, endDate
            otherInvoices = rest


template BrokerCustomerInvitation
  with
    operator : Party
    broker : Party
    brokerCustomer : Party
    isBuyer : Bool
  where
    signatory broker

    controller brokerCustomer can
      BrokerCustomerInvitation_Accept : ContractId BrokerCustomer
        do
          create DismissibleNotification with
            sender = brokerCustomer, senderRole = Some InvestorRole
            receiver = broker, text = "Broker customer invitation accepted."
          when isBuyer $ void $ exerciseByKey @Buyer (operator,brokerCustomer) Buyer_AddBroker with broker
          create BrokerCustomer with ..
      BrokerCustomerInvitation_Reject : ()
        do
          create DismissibleNotification with
            sender = brokerCustomer, senderRole = Some InvestorRole
            receiver = broker, text = "Broker customer invitation rejected."
          return ()


template BrokerCustomer
  with
    operator : Party
    broker : Party
    brokerCustomer : Party
    -- depositCids : [ContractId AssetDeposit]
  where
    signatory broker, brokerCustomer

    key (broker, operator, brokerCustomer) : (Party, Party, Party)
    maintainer key._1

    controller brokerCustomer can
      nonconsuming BrokerCustomer_SendInvoiceToBroker : (ContractId Invoice)
        with
          invoiceCid : ContractId Invoice
        do
          -- create DismissibleNotification with sender = broker, senderRole = Some InvestorRole, receiver = broker, text = "test"
          exercise invoiceCid Invoice_TransferToBroker with broker

    controller broker can
      nonconsuming BrokerCustomer_SendInvoiceToAuction : (ContractId CreateAuctionRequest, ContractId Invoice)
        with
          invoice : Invoice
          minimumQuantity : Decimal
          minimumProceeds : Decimal
          bidIncrement : Decimal
          endDate : Time
        do
          exerciseByKey @Invoice (key invoice) Invoice_SendToAuction with ..

      nonconsuming BrokerCustomer_PlaceBid : Either (ContractId PlaceBidRequestDenial) (ContractId OrderRequest)
        with
          auctionId : Id
          bidAmount : Decimal
          auctionAmount : Decimal
        do
          (buyerId, buyer) <- fetchByKey @Buyer (operator,brokerCustomer)
          exercise buyerId Buyer_PlaceBid with auctionId, bidAmount, auctionAmount
