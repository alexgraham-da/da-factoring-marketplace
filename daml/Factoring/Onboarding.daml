module Factoring.Onboarding where

import Factoring.Buyer
import Factoring.Registry
import Factoring.Seller

import Marketplace.Custodian
import Marketplace.Operator
import Marketplace.Issuer
import Marketplace.Investor
import qualified Marketplace.Exchange as ME

import DA.Foldable (mapA_)

template FactoringOperator
  with
    operator : Party
    public : Party
  where
    signatory operator
    key operator : Party
    maintainer key

    controller operator can
      nonconsuming FactoringOperator_OnboardSeller : ContractId SellerInvitation
        with
          seller : Party
          csd : Party
          exchange : Party
        do
          -- > Onboard as Issuer and Investor as well
          exerciseByKey @Operator operator Operator_OnboardIssuer with issuer = seller
          exerciseByKey @Operator operator Operator_OnboardInvestor with investor = seller
          create SellerInvitation with
            operator, seller, csd, exchange, public

      nonconsuming FactoringOperator_OnboardBuyer : ContractId BuyerInvitation
        with
          buyer : Party
          csd : Party
          exchange : Party
        do
          -- > Onboard as Issuer and Investor as well
          exerciseByKey @Operator operator Operator_OnboardInvestor with investor = buyer
          create BuyerInvitation with
            operator, buyer, csd, exchange, public

      nonconsuming FactoringOperator_OnboardCSD : ContractId CSDInvitation
        with
          csd : Party
          exchange : Party
        do
          exerciseByKey @Operator operator Operator_OnboardIssuer with issuer = csd
          exerciseByKey @Operator operator Operator_OnboardInvestor with investor = csd
          exerciseByKey @Operator operator Operator_OnboardCustodian with custodian = csd
          create CSDInvitation with
            operator, csd, exchange, public

      nonconsuming FactoringOperator_OnboardExchange : ContractId FactoringExchangeInvitation
        with
          csd : Party
          exchange : Party
        do
          exerciseByKey @Operator operator Operator_OnboardExchange with ..
          create FactoringExchangeInvitation with
            operator, exchange, csd


      nonconsuming FactoringOperator_SetupMarket : ()
        with
          csd : Party
          exchange : Party
          sellers : [Party]
          buyers : [Party]
          brokers : [Party]
        do
          create Operator with operator, public
          exercise self FactoringOperator_OnboardCSD with csd, exchange
          exercise self FactoringOperator_OnboardExchange with csd, exchange
          mapA_ (\s -> exercise self FactoringOperator_OnboardSeller with seller = s, csd, exchange) sellers
          mapA_ (\b -> exercise self FactoringOperator_OnboardBuyer with buyer = b, csd, exchange) sellers


template SellerInvitation
  with
    operator : Party
    seller : Party
    csd : Party
    exchange : Party
    public : Party
  where
    signatory operator

    key (operator, seller) : (Party, Party)
    maintainer key._1

    controller seller can
      SellerInvitation_Accept : ContractId Seller
        with
          name : Text
          location : Text
          isPublic : Bool
        do
          -- > Accept Issuer and Investor invitations
          (issuerInviteCid,_) <- fetchByKey @IssuerInvitation (operator, seller)
          (investorInviteCid,_) <- fetchByKey @InvestorInvitation (operator, seller)
          issuerId <- exercise issuerInviteCid IssuerInvitation_Accept with title = "", issuerID = "", name, location
          investorId <- exercise investorInviteCid InvestorInvitation_Accept with name, location, isPublic = True

          -- > Request relationships with custodian and exchange
          exercise investorId Investor_RequestCustodianRelationship with custodian = csd, ..
          exercise investorId Investor_RequestExchangeParticipantInvitation with exchange

          create RegisteredSeller with ..
          create Seller with operator, seller, csd, exchange, public


template BuyerInvitation
  with
    operator : Party
    buyer : Party
    csd : Party
    exchange : Party
    public : Party
  where
    signatory operator
    key (operator, buyer) : (Party, Party)
    maintainer key._1

    controller buyer can
      BuyerInvitation_Accept : ContractId Buyer
        with
          name : Text
          location : Text
          isPublic : Bool
        do
          (investorInviteCid,_) <- fetchByKey @InvestorInvitation (operator, buyer)
          investorId <- exercise investorInviteCid InvestorInvitation_Accept with name, location, isPublic = True

          exercise investorId Investor_RequestCustodianRelationship with custodian = csd, ..
          exercise investorId Investor_RequestExchangeParticipantInvitation with exchange

          create RegisteredBuyer with ..

          create BuyerWallet with csd, buyer, depositCid = None, funds = 0.0
          create Buyer with operator, buyer, csd, exchange, public


template CSDInvitation
  with
    operator : Party
    csd : Party
    exchange : Party
    public : Party
  where
    signatory operator
    key (operator, csd) : (Party, Party)
    maintainer key._1
    controller csd can
      CSDInvitation_Accept : ()
        with
          name : Text
          location : Text
        do
            (issuerInviteCid,_) <- fetchByKey @IssuerInvitation (operator, csd)
            (investorInviteCid,_) <- fetchByKey @InvestorInvitation (operator, csd)
            (custodianInviteCid,_) <- fetchByKey @CustodianInvitation (operator, csd)

            issuerCid <- exercise issuerInviteCid IssuerInvitation_Accept with title = "", issuerID = "", name, location
            investorCid <- exercise investorInviteCid InvestorInvitation_Accept with name, location, isPublic = True
            custodianCid <- exercise custodianInviteCid CustodianInvitation_Accept with name, location

            exercise investorCid Investor_RequestExchangeParticipantInvitation with exchange

            return ()

template FactoringExchangeInvitation
  with
    operator : Party
    exchange : Party
    csd : Party
  where
    signatory operator
    key (operator, exchange) : (Party, Party)
    maintainer key._1
    controller exchange can
      FactoringExchangeInvitation_Accept : ()
        with
          name : Text
          location : Text
        do
          (exchangeInviteCid,_) <- fetchByKey @ME.ExchangeInvitation (operator, exchange)
          exchangeCid <- exercise exchangeInviteCid ME.ExchangeInvitation_Accept with name, location
          return ()
