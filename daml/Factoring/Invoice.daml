module Factoring.Invoice where

import Marketplace.Exchange
import Marketplace.Custodian
import Marketplace.Utils

import Factoring.Utils


import DA.Finance.Types
import qualified DA.Text as T

import qualified DA.Next.Set as Set

template Auction
  with
    operator : Party
    csd : Party
    exchange : Party
    public : Party
    id : Id
    tokenPair : IdPair
    invoices : [Invoice]
  where
    signatory id.signatories
    key id : Id
    maintainer key.signatories

-- |Current status of an invoice
data InvoiceStatus = InvoiceOpen
                   | InvoiceLive with
                      minimumQuantity : Decimal
                      minimumProceeds : Decimal
                      bidIncrement : Decimal
                      endDate : Date
                   | InvoiceSold with
                      soldAt : Date
                   | InvoicePaid with
                      paidAt : Date
    deriving (Show, Eq)

makeInvoiceAssetId : Party -> [Invoice] -> Id
makeInvoiceAssetId exchange []        = error "you cannot make an invoice asset id with no invoices"
makeInvoiceAssetId exchange [invoice] = invoice.token
makeInvoiceAssetId exchange invoices  = Id with
    signatories = Set.fromList [exchange]
    label = T.intercalate "-" ns
    version = 0
  where
    ns = map (\i -> i.invoiceNumber) invoices

-- |Requests that the Exchange create a new MarketPair
template CreateAuctionRequest
  with
    operator : Party
    csd : Party
    exchange : Party
    public : Party
    minQuantity : Decimal
    maxQuantity : Decimal
    invoices : [Invoice]
  where
    signatory csd
    controller exchange can
      CreateAuctionRequest_Accept : ContractId Auction
        do

          -- > TODO: deposit token into account??

          let baseTokenId = makeInvoiceAssetId exchange invoices
          let quoteTokenId = getUSDTokenID csd
          -- > Create MarketPairs
          exerciseByKey @Exchange (operator, exchange) Exchange_AddPair with
              baseTokenId
              quoteTokenId
              minQuantity
              maxQuantity

          -- > Create Auction contract
          create Auction with
            operator, csd, exchange, public
            id = quoteTokenId
            tokenPair = (quoteTokenId, quoteTokenId)
            invoices

-- |Request the CSD to create an invoice and add invoice amount into
-- their account
template CreateInvoiceRequest
  with
    operator : Party
    csd : Party
    seller : Party
    exchange : Party
    public : Party
    payer : Text
    tokenId : Id
    invoiceNumber : Text
    amount : Decimal
    issueDate : Date
    dueDate : Date
  where
    signatory seller

    controller csd can
      CreateInvoiceRequest_Accept : ContractId Invoice
        do
          -- > deposit invoice amount into account
          exerciseByKey @Custodian (operator, csd) Custodian_CreateDeposit with
            tokenId
            depositQuantity = amount
            beneficiary = csd

          -- > create actual invoice
          create Invoice with
            operator, csd, seller, exchange, public, amount
            payer, invoiceNumber, issueDate, dueDate
            token = tokenId
            status = InvoiceOpen

-- |Template to keep track of an invoice at all stages
template Invoice
  with
    operator : Party
    csd : Party
    seller : Party
    exchange : Party
    public : Party
    payer : Text
    invoiceNumber : Text
    amount : Decimal
    token : Id
    issueDate : Date
    dueDate : Date
    status : InvoiceStatus
  where
    signatory csd
    key (csd, seller, token) : (Party, Party, Id)
    maintainer key._1

    controller seller can
      nonconsuming Invoice_SendToAuction : (ContractId CreateAuctionRequest, ContractId Invoice)
        with
          minimumQuantity : Decimal
          minimumProceeds : Decimal
          bidIncrement : Decimal
          endDate : Date
        do
          -- > request to exchange to create a marketpair
          marketRequestCid <- create CreateAuctionRequest with
              operator, csd, exchange, public
              minQuantity = minimumQuantity
              maxQuantity = amount
              invoices = [this]

          -- > update status
          archive self
          (,) marketRequestCid <$> create this with status = InvoiceLive with ..
