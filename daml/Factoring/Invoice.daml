module Factoring.Invoice where

import Marketplace.Exchange
import Marketplace.ExchangeParticipant
import Marketplace.Custodian
import Marketplace.Utils
import Marketplace.Investor
import Marketplace.Issuer
import Marketplace.Token
import Marketplace.Trading
import Marketplace.Transfer

import Factoring.Utils

import DA.Finance.Asset
import DA.Finance.Types
import qualified DA.Text as T

import DA.Action
import DA.Foldable (mapA_)
import DA.Optional
import DA.List
import DA.Next.Set (Set)
import qualified DA.Next.Set as Set

type ContractPair a = (ContractId a, a)

template CreateBidRequest
  with
    buyer : Party
    onBehalfOf : Party
    exchange : Party
    orderRequestCid : ContractId OrderRequest
  where
    signatory buyer
    controller exchange can
      CreateBidRequest_Ack : (ContractId Bid, ContractId Auction)
        with
          orderId : Int
        do
          -- dedupExercise orderRequestCid OrderRequest_Ack with orderId = currentId
          order <- (.order) <$> fetch orderRequestCid
          exercise orderRequestCid OrderRequest_Ack with ..

          -- > Create a 'Bid'
          -- (auctionCid,auction) <- fromSome <$> fetchByKey @Auction order.pair._1
          exerciseByKey @Auction order.pair._1 Auction_AddBid with
                addBuyer = order.exchParticipant
                addPrice = order.price
                addAmount = order.qty, ..


template Bid
  with
    operator : Party
    buyer : Party
    onBehalfOf : Party
    exchange : Party
    amount : Decimal
    price : Decimal
    quantityFilled : Decimal
    auctionId : Id
    status : BidStatus
    orderId : Int
    createdAt : Time
  where
    signatory exchange
    observer buyer, exchange
    key (exchange, orderId) : (Party, Int)
    maintainer key._1
    controller exchange can
      Bid_ChangeStatus : ContractId Bid
        with
          newStatus : BidStatus
        do
          create this with status = newStatus
      Bid_ChangeQuantityFilled : ContractId Bid
        with
          newQuantity : Decimal
        do create this with quantityFilled = newQuantity


data BidStatus = BidOpen | BidWon | BidLost deriving (Show,Eq)

data AuctionStatus = AuctionOpen | AuctionClosed | AuctionFailed
    deriving (Show,Eq)

template Auction
  with
    operator : Party
    csd : Party
    exchange : Party
    public : Party
    id : Id
    tokenPair : IdPair
    invoice : Invoice
    bids : [Bid]
    status : AuctionStatus
    minQuantity : Decimal
    minProceeds : Decimal
    bidIncrement : Decimal
    endDate : Time
    depositCid : ContractId AssetDeposit
    observers : Set Party
    createdAt : Time
  where
    signatory csd, exchange -- id.signatories
    key id : Id
    maintainer key.signatories
    observer observers
    controller exchange can
      Auction_AddBid : (ContractId Bid, ContractId Auction)
        with
          addBuyer : Party
          addPrice : Decimal
          addAmount : Decimal
          orderId : Int
        do
          time <- getTime
          let bid = Bid with
                price = addPrice, buyer = addBuyer, onBehalfOf = addBuyer
                amount = addAmount, quantityFilled = 0.0
                auctionId = id, orderId, status = BidOpen, createdAt = time
                operator, exchange
          bidCid <- create bid
          auctionCid <- create this with bids = bid :: bids
          return (bidCid, auctionCid)

      Auction_AddObservers : ContractId Auction
        with
          newObservers : Set Party
        do
          (baseTokenCid,_) <- fetchByKey @Token tokenPair._1
          exercise baseTokenCid Token_AddObservers with party = csd, newObservers

          create this with observers = Set.union observers newObservers

      Auction_UpdateBid : ContractId Auction
        with
          bid : Bid
          newBid : Bid
        do
          create this with bids = newBid :: (delete bid bids)

      Auction_RemoveBid : ContractId Auction
        with
          bidCid : ContractId Bid
        do
          bid <- fetch bidCid
          assertMsg "bid must belong to this auction" $ bid `elem` bids

          archive bidCid
          create this with bids = delete bid bids

    controller exchange can
      Auction_End : ContractId Auction
        do
          bidOrders <- mapA (\bid -> (,) bid <$> fetchByKey @Order (exchange,bid.orderId)) bids

          let maxDiscount = (1.0 - (minProceeds / bidIncrement)) * 100.0
          let totalBidQuantity = foldl (\acc (b,_) -> b.amount + acc) 0.0 (filter (checkBid maxDiscount bidIncrement) bidOrders)

          (invoiceCid,_) <- fetchByKey @Invoice (key invoice)
          timestamp <- getTime

          if totalBidQuantity < minQuantity -- || totalBidProceeds < minProceeds
          then do
            updatedLostBidCids <- mapA (\b -> exerciseByKey @Bid (key b) Bid_ChangeStatus with newStatus = BidLost) bids
            updatedLostBids <- mapA fetch updatedLostBidCids
            exercise invoiceCid Invoice_UpdateStatus with newStatus = InvoiceOpen
            create this with bids = updatedLostBids, status = AuctionFailed, id = id with label = id.label <> "-failed@" <> (show timestamp)
          else do
            (exchParticipantCid,_) <- fetchByKey @ExchangeParticipant (exchange,operator,csd)
            orderRequestCid <- exercise exchParticipantCid ExchangeParticipant_PlaceOffer
                with depositCid, pair = tokenPair, price = 0.0
            orderCid <- exercise orderRequestCid OrderRequest_Ack with orderId = -1
            order <- fetch orderCid

            (quantityFilled, newBids) <- handleBids exchange bidOrders (orderCid,order) this
            time <- getTime
            exercise invoiceCid Invoice_UpdateStatus with newStatus = InvoiceSold { soldAt = time, quantityFilled = quantityFilled }
            create this with bids = newBids, status = AuctionClosed

    nonconsuming choice
      Auction_GetBids : [Bid]
      with
        buyer : Party
      controller buyer
      do
        return $ filter (\b -> b.buyer == buyer) bids

    nonconsuming choice
      Auction_GetBuyerStatus : BuyerStatus
      with
        buyer : Party
      controller buyer
      do
        case status of
          AuctionOpen   -> return BuyerOpen
          AuctionClosed -> return BuyerLost
          AuctionFailed -> return BuyerLost

-- |Returns true if bid is valid
checkBid : Decimal -> Decimal -> (Bid,ContractPair Order) -> Bool
checkBid maxDiscountRate minBidIncrement (b,_) = bidDiscountRate <= maxDiscountRate && b.amount >= minBidIncrement && isInIncrement
  where
    bidDiscountRate = (1.0 - b.price) * 100.0
    isInIncrement = ((ceiling b.amount) % (ceiling minBidIncrement)) == 0

handleBids : Party -> [(Bid,ContractPair Order)] -> ContractPair Order -> Auction -> Update (Decimal,[Bid])
handleBids exchange bids (auctionOrderCid, auctionOrder) auction = do
  let maxDiscount = (1.0 - (auction.minProceeds / auction.bidIncrement)) * 100.0
  let goodBids = filter (checkBid maxDiscount auction.bidIncrement) bids
  let sortedBids = reverse $ concatMap (sortOn getCreatedAt)
                   $ groupOn getPrice
                   $ sortOn getPrice goodBids
  (optRemainingOrderCid, winningBids) <- goAuction auction (Some auctionOrderCid) sortedBids
  let losingBids = filter (`notElem` winningBids) (map fst bids)

  updatedLostBids    <- mapA cancelBid losingBids
  updatedWinningBids <- mapA (\wb -> exerciseByKey @Bid (exchange,wb.orderId) Bid_ChangeStatus with newStatus = BidWon) winningBids

  allBids <- mapA fetch (updatedLostBids ++ updatedWinningBids)

  fetchedWinningBids <- mapA fetch updatedWinningBids
  let quantityFilled = foldl (\acc b -> b.quantityFilled + acc) 0.0 fetchedWinningBids
  return (quantityFilled, allBids)

  where
    getPrice (bid,_)     = bid.price
    getCreatedAt (bid,_) = bid.createdAt

    checkBid : Decimal -> Decimal -> (Bid,ContractPair Order) -> Bool
    checkBid maxDiscountRate minBidIncrement (b,_) = bidDiscountRate <= maxDiscountRate && b.amount >= minBidIncrement && isInIncrement
      where
        bidDiscountRate = (1.0 - b.price) * 100.0
        isInIncrement = ((ceiling b.amount) % (ceiling minBidIncrement)) == 0

    cancelBid : Bid -> Update (ContractId Bid)
    cancelBid cb = do
      (bidOrderCid,_) <- fetchByKey @Order (exchange,cb.orderId)
      exercise bidOrderCid Order_Cancel
      exerciseByKey @Bid (exchange,cb.orderId) Bid_ChangeStatus with newStatus = BidLost


goAuction
  : Auction
  -> Optional (ContractId Order)
  -> [(Bid,ContractPair Order)]
  -> Update (Optional (ContractId AssetDeposit), [Bid])
goAuction _ None _                      = return (None, [])
goAuction _ (Some goAuctionOrderCid) [] = do
  order <- fetch goAuctionOrderCid
  exercise goAuctionOrderCid Order_Cancel
  return (Some order.depositCid, [])
goAuction auction (Some goAuctionOrderCid) ((bid,(bidOrderCid,_))::bs) = do
  time <- getTime
  auctionOrder <- fetch goAuctionOrderCid
  let fillQty = min bid.amount auctionOrder.qty

  (auctionTradesideCid,optAuctionRemaining) <- exercise goAuctionOrderCid Order_Fill with
    fillQty
    fillPrice = bid.price
    counterOrderId = bid.orderId
    counterParty = bid.buyer
    timestamp = show time

  (bidTradesideCid,_) <- exercise bidOrderCid Order_Fill with
      fillQty
      fillPrice = bid.price
      counterOrderId = auctionOrder.orderId
      counterParty = auctionOrder.exchParticipant
      timestamp = show time

  (_,optAuctionTransferRequest) <- exercise auctionTradesideCid TradeSide_Settle
  (_,optBidTransferRequest) <- exercise bidTradesideCid TradeSide_Settle

  unless (isNone optAuctionTransferRequest) $
    void $ exercise (fromSome optAuctionTransferRequest) DepositTransferRequest_Approve

  unless (isNone optBidTransferRequest) $ do
    bidDepositCid <- exercise (fromSome optBidTransferRequest) DepositTransferRequest_Approve
    -- receiver is initial owner
    let seller = auction.invoice.initialOwner
    bidDeposit <- fetch bidDepositCid
    let receiverAccountId = Id
          with
            signatories = bidDeposit.account.id.signatories,
              label = getAccountLabel seller auction.csd,
              version = 0
    transferRequestCid <- create DepositTransferRequest with
      sender = auction.csd
      senderAccountId = bidDeposit.account.id
      depositCid = bidDepositCid, ..
    void $ exercise transferRequestCid DepositTransferRequest_Approve

  newBid <- fetch =<< exerciseByKey @Bid (key bid) Bid_ChangeQuantityFilled with newQuantity = fillQty
  (nextRemaining, nextBids) <- goAuction auction optAuctionRemaining bs
  return (nextRemaining, bid :: nextBids)
  -- (::) bid <$> goAuction auction optAuctionRemaining bs


data BuyerStatus = BuyerWon | BuyerLost | BuyerWinning | BuyerLosing | BuyerOpen
    deriving (Show,Eq)

makeInvoiceAssetId : Party -> [Invoice] -> Id
makeInvoiceAssetId exchange []        = error "you cannot make an invoice asset id with no invoices"
makeInvoiceAssetId exchange [invoice] = invoice.token
makeInvoiceAssetId exchange invoices  = Id with
    signatories = Set.fromList [exchange]
    label = T.intercalate "-" ns
    version = 0
  where
    ns = map (\i -> show i.invoiceId) invoices

-- |Requests that the Exchange create a new MarketPair
template CreateAuctionRequest
  with
    operator : Party
    csd : Party
    exchange : Party
    public : Party
    depositCids : [ContractId AssetDeposit]
    minQuantity : Decimal
    maxQuantity : Decimal
    minProceeds : Decimal
    bidIncrement : Decimal
    endDate : Time
    invoice : Invoice -- [Invoice]
  where
    signatory csd
    controller exchange can
      CreateAuctionRequest_Accept : ContractId Auction
        do
          time <- getTime
          (exchangeIssuerCid,_) <- fetchByKey @Issuer (operator, exchange)

          let baseTokenId = makeInvoiceAssetId exchange [invoice]
          let quoteTokenId = getUSDTokenID csd

          newDepositCid <- case depositCids of
              [] -> error "deposit cids should not be empty"
              [singleDepositCid] -> return singleDepositCid
              xs -> return undefined -- merge?

          -- > Create MarketPairs
          optMarketPair <- lookupByKey @MarketPair Id with
              signatories = Set.fromList [exchange], label = baseTokenId.label <> quoteTokenId.label, version = 0

          when (isNone optMarketPair) $
            void $ exerciseByKey @Exchange (operator, exchange) Exchange_AddPair with
              baseTokenId
              quoteTokenId
              minQuantity
              maxQuantity

          -- > Create Auction contract
          create Auction with
            operator, csd, exchange, public
            depositCid = newDepositCid
            id = baseTokenId
            tokenPair = (baseTokenId, quoteTokenId)
            status = AuctionOpen
            minProceeds, minQuantity, bidIncrement, endDate
            invoice, bids = [], observers = Set.fromList [exchange, csd, public], createdAt = time

template CreatePoolRequest
  with
    operator : Party
    broker : Party
    csd : Party
    exchange : Party
    public : Party

    -- invoice info
    payer : Text
    invoiceNumber : Text
    amount : Decimal
    issueDate : Date
    dueDate : Date

    -- pool auction info
    minQuantity : Decimal
    maxQuantity : Decimal
    minProceeds : Decimal
    bidIncrement : Decimal
    endDate : Time
    invoices : [Invoice]
  where
    signatory broker
    controller csd can
      CreatePoolRequest_Accept : (ContractId Invoice, ContractId CreateAuctionRequest)
        with
          invoiceId : Int
        do
          createInvoiceRequestCid <- create CreateInvoiceRequest with
            seller = broker, initialOwner = broker, included = invoices, ..

          invoiceCid <- exercise createInvoiceRequestCid CreateInvoiceRequest_Accept with ..
          invoice <- fetch invoiceCid

          (,) invoiceCid <$> create CreateAuctionRequest with depositCids = [invoice.depositCid], ..


-- |Current status of an invoice
data InvoiceStatus = InvoiceOpen
                   | InvoiceLive with
                      minimumQuantity : Decimal
                      minimumProceeds : Decimal
                      bidIncrement : Decimal
                      endDate : Time
                   | InvoiceSold with
                      soldAt : Time
                      quantityFilled : Decimal
                   | InvoicePaid with
                      paidAt : Time
                   | InvoicePooled
    deriving (Show, Eq)

-- |Checks if it should be allowed to send this invoice to auction
isAuctionable : InvoiceStatus -> Bool
isAuctionable InvoiceOpen = True
isAuctionable _           = False


-- |Request the CSD to create an invoice and add invoice amount into
-- their account
template CreateInvoiceRequest
  with
    operator : Party
    csd : Party
    seller : Party
    initialOwner : Party
    exchange : Party
    public : Party
    payer : Text
    invoiceNumber : Text
    amount : Decimal
    issueDate : Date
    dueDate : Date
    included : [Invoice]
  where
    signatory seller

    controller csd can
      CreateInvoiceRequest_Accept : ContractId Invoice
        with
          invoiceId : Int
        do
          time <- getTime
          (csdIssuerId,_) <- fetchByKey @Issuer (operator, csd)

          -- optTokenCid <- lookupByKey @Token (Id with signatories = Set.fromList [csd], label = invoiceNumber, version = 0)
          -- > Issue Token
          tokenCid <- exercise csdIssuerId Issuer_IssueToken with
            name = show invoiceId
            quantityPrecision = 8 -- dollars
            description = payer
            isPublic = True
            observers = [seller, initialOwner, csd, exchange, public]

          token <- fetch tokenCid
          let tokenId = token.id

          -- > deposit invoice amount into account
          depositCid <- exerciseByKey @Custodian (operator, csd) Custodian_CreateDeposit with
            tokenId = token.id
            depositQuantity = amount
            beneficiary = csd

          transferRequestCid <- exerciseByKey @Investor (operator, csd) Investor_AllocateToProvider with
             depositCid, provider = exchange
          newDepositCid <- exercise transferRequestCid DepositTransferRequest_Approve

          -- > create actual invoice
          create Invoice with
            operator, csd, seller, exchange, public, amount, initialOwner
            payer, invoiceNumber, invoiceId, issueDate, dueDate, included
            depositCid = newDepositCid
            token = tokenId
            status = InvoiceOpen, createdAt = time


template CurrentInvoiceId
  with
    csd : Party
    currentId : Int
  where
    signatory csd

    controller csd can
      CurrentInvoiceId_Increment : (Int,ContractId CurrentInvoiceId)
        do
          let next = currentId + 1
          (,) next <$> create this with currentId = next

      CurrentInvoiceId_Set : ContractId CurrentInvoiceId
        with
          newId : Int
        do
          create this with currentId = newId


-- |Template to keep track of an invoice at all stages
template Invoice
  with
    operator : Party
    csd : Party
    seller : Party
    initialOwner : Party
    exchange : Party
    public : Party
    payer : Text
    invoiceNumber : Text
    amount : Decimal
    included : [Invoice]
    token : Id
    depositCid : ContractId AssetDeposit
    issueDate : Date
    dueDate : Date
    status : InvoiceStatus
    invoiceId : Int
    createdAt : Time
  where
    signatory seller, csd
    key (csd, seller, invoiceId) : (Party, Party, Int)
    maintainer key._1
    observer [exchange, initialOwner]

    controller seller can
      nonconsuming Invoice_SendToAuction : (ContractId CreateAuctionRequest, ContractId Invoice)
        with
          minimumQuantity : Decimal
          minimumProceeds : Decimal
          bidIncrement : Decimal
          endDate : Time
        do
          assertMsg "Invoice must be Open to send to auction" $ isAuctionable status

          -- > request to exchange to create a marketpair
          marketRequestCid <- create CreateAuctionRequest with
              operator, csd, exchange, public
              depositCids = [depositCid]
              minQuantity = minimumQuantity
              maxQuantity = amount
              minProceeds = minimumProceeds
              bidIncrement
              endDate
              invoice = this

          -- > update status
          archive self
          (,) marketRequestCid <$> create this with status = InvoiceLive with ..

      nonconsuming Invoice_SendWithPool : ContractId CreatePoolRequest
        with
          otherInvoices : [Invoice]
          minimumQuantity : Decimal
          minimumProceeds : Decimal
          bidIncrement : Decimal
          endDate : Time
        do
          let invoices = this :: otherInvoices
          assertMsg "All invoices must be open to pool" $ all (isAuctionable . (.status)) invoices

          let depositCids = map (.depositCid) invoices
          let newAmount = sum $ map (.amount) invoices
          mapA_ (\i -> exerciseByKey @Invoice (key i) Invoice_UpdateStatus with newStatus = InvoicePooled) invoices

          let newNumber = T.intercalate "-" $ map (.invoiceNumber) invoices
          -- let newAmount = foldl (+) 0.0 $ map (.

          create CreatePoolRequest with
            operator, csd, exchange, public
            minQuantity = minimumQuantity
            maxQuantity = amount
            minProceeds = minimumProceeds
            bidIncrement, endDate
            broker = seller, payer = show seller
            invoiceNumber = newNumber, amount = newAmount
            invoices
            issueDate, dueDate -- TODO: fix

      Invoice_TransferToBroker : () -- ContractId CreateInvoiceRequest -- (ContractId Invoice)
        with
          broker : Party
        do
          deposit <- fetch depositCid
          debitRequestCid <- create DepositDebitRequest
            { owner = deposit.account.owner
            , ownerAccount = deposit.account
            , depositCid = depositCid }
          exercise debitRequestCid DepositDebitRequest_Approve

          return ()
            -- create CreateInvoiceRequest with seller = broker, ..
      --       -- create this with seller = broker

    controller csd can
      Invoice_UpdateStatus : ContractId Invoice
        with
          newStatus : InvoiceStatus
        do
            case newStatus of
              (InvoiceSold _ quantityFilled) -> do
                when (quantityFilled < amount) $
                  void $ create CreateInvoiceRequest with amount = amount - quantityFilled, ..
              InvoicePooled -> do
                deposit <- fetch depositCid
                debitRequestCid <- create DepositDebitRequest with
                  owner = deposit.account.owner
                  ownerAccount = deposit.account, ..
                exercise debitRequestCid DepositDebitRequest_Approve
                return ()
              _ -> return ()
            create this with status = newStatus
