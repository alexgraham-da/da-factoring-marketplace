module Factoring.Invoice where

import Marketplace.Exchange
import Marketplace.ExchangeParticipant
import Marketplace.Custodian
import Marketplace.Utils
import Marketplace.Issuer
import Marketplace.Token

import Factoring.Utils

import DA.Finance.Asset
import DA.Finance.Types
import qualified DA.Text as T

import DA.Next.Set (Set)
import qualified DA.Next.Set as Set

template Bid
  with
    operator : Party
    buyer : Party
    exchange : Party
    amount : Decimal
    price : Decimal
    auctionId : Id
    createdAt : Time
  where
    signatory exchange
    observer buyer, exchange

data AuctionStatus = AuctionOpen | AuctionClosed
    deriving (Show,Eq)

template Auction
  with
    operator : Party
    csd : Party
    exchange : Party
    public : Party
    id : Id
    tokenPair : IdPair
    invoices : [Invoice]
    bids : [Bid]
    status : AuctionStatus
    minQuantity : Decimal
    minProceeds : Decimal
    bidIncrement : Decimal
    endDate : Time
    depositCid : ContractId AssetDeposit
    observers : Set Party
    createdAt : Time
  where
    signatory id.signatories
    key id : Id
    maintainer key.signatories
    observer observers
    controller exchange can
      Auction_AddBid : (ContractId Bid, ContractId Auction)
        with
          addBuyer : Party
          addPrice : Decimal
          addAmount : Decimal
        do
          time <- getTime
          let bid = Bid with
                price = addPrice, buyer = addBuyer, amount = addAmount
                auctionId = id, createdAt = time
                operator, exchange
          bidCid <- create bid
          auctionCid <- create this with bids = bid :: bids
          return (bidCid, auctionCid)

      Auction_AddObservers : ContractId Auction
        with
          newObservers : Set Party
        do
          (baseTokenCid,_) <- fetchByKey @Token tokenPair._1
          exercise baseTokenCid Token_AddObservers with party = csd, newObservers
          create this with observers = Set.union observers newObservers

    controller csd can
      Auction_End : ContractId Auction
        do
          (exchParticipantCid,_) <- fetchByKey @ExchangeParticipant (exchange,operator,csd)
          exercise exchParticipantCid ExchangeParticipant_PlaceOffer
              with depositCid, pair = tokenPair, price = 1.0
          create this with status = AuctionClosed

    nonconsuming choice
      Auction_GetBids : [Bid]
      with
        buyer : Party
      controller buyer
      do
        return $ filter (\b -> b.buyer == buyer) bids

    nonconsuming choice
      Auction_GetBuyerStatus : BuyerStatus
      with
        buyer : Party
      controller buyer
      do
        case status of
          AuctionOpen   -> return BuyerOpen
          AuctionClosed -> return BuyerLost


data BuyerStatus = BuyerWon | BuyerLost | BuyerWinning | BuyerLosing | BuyerOpen
    deriving (Show,Eq)

-- |Current status of an invoice
data InvoiceStatus = InvoiceOpen
                   | InvoiceLive with
                      minimumQuantity : Decimal
                      minimumProceeds : Decimal
                      bidIncrement : Decimal
                      endDate : Time
                   | InvoiceSold with
                      soldAt : Time
                   | InvoicePaid with
                      paidAt : Time
    deriving (Show, Eq)


makeInvoiceAssetId : Party -> [Invoice] -> Id
makeInvoiceAssetId exchange []        = error "you cannot make an invoice asset id with no invoices"
makeInvoiceAssetId exchange [invoice] = invoice.token
makeInvoiceAssetId exchange invoices  = Id with
    signatories = Set.fromList [exchange]
    label = T.intercalate "-" ns
    version = 0
  where
    ns = map (\i -> i.invoiceNumber) invoices

-- |Requests that the Exchange create a new MarketPair
template CreateAuctionRequest
  with
    operator : Party
    csd : Party
    exchange : Party
    public : Party
    depositCid : ContractId AssetDeposit
    minQuantity : Decimal
    maxQuantity : Decimal
    minProceeds : Decimal
    bidIncrement : Decimal
    endDate : Time
    invoices : [Invoice]
  where
    signatory csd
    controller exchange can
      CreateAuctionRequest_Accept : ContractId Auction
        do
          time <- getTime
          -- > TODO: deposit token into account??

          let baseTokenId = makeInvoiceAssetId exchange invoices
          let quoteTokenId = getUSDTokenID csd
          -- > Create MarketPairs
          exerciseByKey @Exchange (operator, exchange) Exchange_AddPair with
              baseTokenId
              quoteTokenId
              minQuantity
              maxQuantity

          -- > Create Auction contract
          create Auction with
            operator, csd, exchange, public
            depositCid
            id = baseTokenId
            tokenPair = (baseTokenId, quoteTokenId)
            status = AuctionOpen
            minProceeds, minQuantity, bidIncrement, endDate
            invoices, bids = [], observers = Set.fromList [exchange, csd, public], createdAt = time

-- |Request the CSD to create an invoice and add invoice amount into
-- their account
template CreateInvoiceRequest
  with
    operator : Party
    csd : Party
    seller : Party
    exchange : Party
    public : Party
    payer : Text
    invoiceNumber : Text
    amount : Decimal
    issueDate : Date
    dueDate : Date
  where
    signatory seller

    controller csd can
      CreateInvoiceRequest_Accept : ContractId Invoice
        do
          time <- getTime
          (csdIssuerId,_) <- fetchByKey @Issuer (operator, csd)

          -- > Issue Token
          tokenCid <- exercise csdIssuerId Issuer_IssueToken with
            name = invoiceNumber
            quantityPrecision = 2 -- dollars
            description = payer
            isPublic = True
            observers = [seller, csd, exchange, public]
          token <- fetch tokenCid
          let tokenId = token.id

          -- > deposit invoice amount into account
          depositCid <- exerciseByKey @Custodian (operator, csd) Custodian_CreateDeposit with
            tokenId = token.id
            depositQuantity = amount
            beneficiary = csd

          -- > create actual invoice
          create Invoice with
            operator, csd, seller, exchange, public, amount, depositCid
            payer, invoiceNumber, issueDate, dueDate
            token = tokenId
            status = InvoiceOpen, createdAt = time

-- |Template to keep track of an invoice at all stages
template Invoice
  with
    operator : Party
    csd : Party
    seller : Party
    exchange : Party
    public : Party
    payer : Text
    invoiceNumber : Text
    amount : Decimal
    token : Id
    depositCid : ContractId AssetDeposit
    issueDate : Date
    dueDate : Date
    status : InvoiceStatus
    createdAt : Time
  where
    signatory csd
    key (csd, seller, invoiceNumber) : (Party, Party, Text)
    maintainer key._1

    controller seller can
      nonconsuming Invoice_SendToAuction : (ContractId CreateAuctionRequest, ContractId Invoice)
        with
          minimumQuantity : Decimal
          minimumProceeds : Decimal
          bidIncrement : Decimal
          endDate : Time
        do
          -- > request to exchange to create a marketpair
          marketRequestCid <- create CreateAuctionRequest with
              operator, csd, exchange, public
              depositCid
              minQuantity = minimumQuantity
              maxQuantity = amount
              minProceeds = minimumProceeds
              bidIncrement
              endDate
              invoices = [this]

          -- > update status
          archive self
          (,) marketRequestCid <$> create this with status = InvoiceLive with ..
