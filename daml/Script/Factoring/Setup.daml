module Script.Factoring.Setup where

import Marketplace.Custodian
import Marketplace.Exchange
import Marketplace.ExchangeParticipant
import Marketplace.Investor
import Marketplace.Issuer
import Marketplace.Operator
import Marketplace.Utils

import Factoring.Buyer
import Factoring.Onboarding

import Script.Factoring

import DA.Finance.Types
import DA.Next.Set

import Daml.Script

setupFactoring : Script ()
setupFactoring = allocateParties >>= doSetupFactoring

doSetupFactoring : LedgerParties -> Script ()
doSetupFactoring lp@(LedgerParties operator public csd buyer1 buyer2 seller1 seller2 exchange broker) = do

  let observers = [csd, public, exchange, seller1, seller2, buyer1, buyer2]

  -- | Onboard and create relationships
  debug "onboarding and creating relationships..."

  handleOnboarding lp
  usdTokenId <- createToken operator csd "USD" "US Dollars" 2 observers


  -- Setup Buyer2 accounts
  ----------------------------

  exchDepositReqCid <- buyer1 `submit` exerciseByKeyCmd @Buyer (operator, buyer1) Buyer_RequestDeposit
      with amount = 10000000.0
  buyer1UsdDeposit1 <- csd `submit` exerciseCmd exchDepositReqCid CreateExchangeDepositRequest_Accept

  exchDepositReqCid <- buyer2 `submit` exerciseByKeyCmd @Buyer (operator, buyer2) Buyer_RequestDeposit
      with amount = 10000000.0
  buyer1UsdDeposit1 <- csd `submit` exerciseCmd exchDepositReqCid CreateExchangeDepositRequest_Accept


  return ()

handleOnboarding : LedgerParties -> Script ()
handleOnboarding lp@(LedgerParties operator public csd buyer1 buyer2 seller1 seller2 exchange broker) = do
  let name = "default name"
      title = "default title"
      issuerID = "default issuerID"
      location = "default location"

  operator `submit` createCmd Operator with operator = operator, public
  factoringOperatorCid <- operator `submit` createCmd FactoringOperator with operator = operator, public

  -- Onboard CSD
  csdInvitationCid <- operator `submit` exerciseCmd factoringOperatorCid FactoringOperator_OnboardCSD with csd, exchange
  csd `submit` exerciseCmd csdInvitationCid CSDInvitation_Accept with name = "CSD", location = ""

  --- onboard Exchange
  exchangeInvCid <- operator `submit` exerciseCmd factoringOperatorCid FactoringOperator_OnboardExchange with csd, exchange
  exchange `submit` exerciseCmd exchangeInvCid FactoringExchangeInvitation_Accept with name = "Exchange", location = ""
  exchange `submit` exerciseByKeyCmd @ExchangeParticipantInvitationRequest (operator, exchange, csd) ExchangeParticipantInvitationRequest_Accept

  -- onboard buyers
  buyerInviteCid <- operator `submit` exerciseByKeyCmd @FactoringOperator operator FactoringOperator_OnboardBuyer with
        buyer = buyer1, csd, exchange
  buyer1 `submit` exerciseCmd buyerInviteCid BuyerInvitation_Accept with
      name = "Buyer 1", location = "", isPublic = True

  buyerInviteCid <- operator `submit` exerciseByKeyCmd @FactoringOperator operator FactoringOperator_OnboardBuyer with
        buyer = buyer2, csd, exchange
  buyer2 `submit` exerciseCmd buyerInviteCid BuyerInvitation_Accept with
      name = "Buyer 2", location = "", isPublic = True

  acceptRelationshipRequests lp buyer1
  acceptRelationshipRequests lp buyer2

  --- onboard CSD as Investor
  -- onboardInvestor lp csd "CSD as Investor"

  -- > Onboard Sellers
  sellerInviteCid <- operator `submit` exerciseByKeyCmd @FactoringOperator operator FactoringOperator_OnboardSeller with
        seller = seller1, csd, exchange
  seller1 `submit` exerciseCmd sellerInviteCid SellerInvitation_Accept with
      name = "Seller 1", location = "", isPublic = True

  sellerInviteCid <- operator `submit` exerciseByKeyCmd @FactoringOperator operator FactoringOperator_OnboardSeller with
        seller = seller2, csd, exchange
  seller2 `submit` exerciseCmd sellerInviteCid SellerInvitation_Accept with
      name = "Seller 2", location = "", isPublic = True

  -- TODO: Add this to onboarding?
  acceptRelationshipRequests lp seller1
  acceptRelationshipRequests lp seller2

  return ()


acceptRelationshipRequests : LedgerParties -> Party -> Script ()
acceptRelationshipRequests lp investor = do
  let operator = lp.userAdmin
      csd      = lp.csd
      exchange = lp.exchange

  csd `submit` exerciseByKeyCmd @CustodianRelationshipRequest (operator,investor,csd,InvestorRole) CustodianRelationshipRequest_Approve
  exchange `submit` exerciseByKeyCmd @ExchangeParticipantInvitationRequest (operator, exchange, investor) ExchangeParticipantInvitationRequest_Accept
  return ()

establishInvestorRelationships : LedgerParties -> Party -> Script ()
establishInvestorRelationships lp investor = do

  let operator = lp.userAdmin
      csd      = lp.csd
      exchange = lp.exchange

  (Some (investorCid,_)) <- queryContractKey @Investor investor (operator,investor)

  -- establish relationship with custodian
  relationshipRequestCid <- investor `submit` exerciseCmd investorCid Investor_RequestCustodianRelationship with custodian = csd, ..
  csd `submit` exerciseCmd relationshipRequestCid CustodianRelationshipRequest_Approve

  -- -- become exchange participant
  exchInviteRequestCid <- investor `submit` exerciseByKeyCmd @Investor (operator,investor) Investor_RequestExchangeParticipantInvitation with exchange
  exchange `submit` exerciseCmd exchInviteRequestCid ExchangeParticipantInvitationRequest_Accept

  return ()


createToken : Party -> Party -> Text -> Text -> Int -> [Party] -> Script Id
createToken operator issuer name description quantityPrecision observers = do
  issuer `submit` exerciseByKeyCmd @Issuer (operator, issuer) Issuer_IssueToken with name, description, quantityPrecision, isPublic = True, observers
  return $ Id with signatories = fromList [ issuer ], label = name, version = 0
