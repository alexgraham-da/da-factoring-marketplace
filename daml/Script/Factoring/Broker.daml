module Script.Factoring.Broker where

import Daml.Script

import Marketplace.Trading

import Factoring.Broker
import Factoring.Seller
import Factoring.Buyer
import Factoring.Invoice
import Factoring.Utils

import DA.Optional
import DA.Date
import DA.Time
import qualified DA.Next.Set as Set

import Script.Factoring
import Script.Factoring.Setup

doTestBrokerFlow : Bool -> LedgerParties -> Script ()
doTestBrokerFlow wt lp@(LedgerParties operator public csd buyer1 buyer2 seller1 seller2 exchange broker) = do
  doSetupFactoring wt lp

  let usdTokenId = getUSDTokenID csd

  -- invite sellers
  seller1InviteCid <- broker `submit` createCmd BrokerCustomerInvitation with operator, broker, brokerCustomer = seller1, isBuyer = False
  seller2InviteCid <- broker `submit` createCmd BrokerCustomerInvitation with operator, broker, brokerCustomer = seller2, isBuyer = False

  seller1BcCid <- seller1 `submit` exerciseCmd seller1InviteCid BrokerCustomerInvitation_Accept
  seller2BcCid  <- seller2 `submit` exerciseCmd seller2InviteCid BrokerCustomerInvitation_Accept

  -- > Create invoice
  invoiceReqId <- seller1 `submit` exerciseByKeyCmd @Seller (operator, seller1) Seller_AddInvoice with
      payer = "Walmart"
      invoiceNumber = "SN3498JFF30Sg"
      amount = 1_000_000.0
      issueDate = date 2020 Dec 10
      dueDate = date 2020 Dec 25

  invoiceCid1 <- csd `submit` exerciseCmd invoiceReqId CreateInvoiceRequest_Accept with invoiceId = 1

  -- > Create invoice
  invoiceReqId <- seller2 `submit` exerciseByKeyCmd @Seller (operator, seller2) Seller_AddInvoice with
      payer = "Target"
      invoiceNumber = "TG2394483"
      amount = 1_000_000.0
      issueDate = date 2020 Dec 10
      dueDate = date 2020 Dec 25

  invoiceCid2 <- csd `submit` exerciseCmd invoiceReqId CreateInvoiceRequest_Accept with invoiceId = 2

  -- > send invoices to broker
  invoiceCid1 <- seller1 `submit` exerciseByKeyCmd @BrokerCustomer (broker,operator,seller1)
      BrokerCustomer_SendInvoiceToBroker with invoiceCid = invoiceCid1

  invoiceCid2 <- seller2 `submit` exerciseByKeyCmd @BrokerCustomer (broker,operator,seller2)
      BrokerCustomer_SendInvoiceToBroker with invoiceCid = invoiceCid2

  -- invoices <- mapA (fmap fromSome <$> queryContractId @Invoice broker) [invoiceCid1, invoiceCid2]
  return ()
  -- auctionReqCid <- broker `submit` exerciseByKeyCmd @Broker (operator,broker)
  --   Broker_SendPoolToAuction with
  --     invoices
  --     minimumQuantity = 1_750_000.0
  --     minimumProceeds = 45_000.0
  --     bidIncrement = 50_000.0
  --     endDate = time (date 2020 Dec 15) 0 0 0
  --
  -- auctionId <- exchange `submit` exerciseCmd auctionReqCid CreateAuctionRequest_Accept
  -- auction <- fromSome <$> queryContractId exchange auctionId
  --
  -- -- invite buyers
  -- buyer1InviteCid <- broker `submit` createCmd BrokerCustomerInvitation with operator, broker, brokerCustomer = buyer1, isBuyer = True
  -- buyer2InviteCid <- broker `submit` createCmd BrokerCustomerInvitation with operator, broker, brokerCustomer = buyer2, isBuyer = True
  --
  -- buyerBc1Cid <- buyer1 `submit` exerciseCmd buyer1InviteCid BrokerCustomerInvitation_Accept
  -- buyerBc2Cid  <- buyer2 `submit` exerciseCmd buyer2InviteCid BrokerCustomerInvitation_Accept
  --
  -- -- broker `submit` exerciseCmd buyerBc1Cid BrokerCustomer_PlaceBid with auctionId = auction.id, bidAmount = 100.0, auctionAmount = 200.0
  --
  -- return ()

testBrokerFlow : Script ()
testBrokerFlow = allocateParties >>= doTestBrokerFlow False
