module Script.Factoring.Broker where

import Daml.Script

import Marketplace.Custodian
import Marketplace.Transfer

import Factoring.Broker
import Factoring.Seller
import Factoring.Invoice
import Factoring.Utils

import DA.Optional
import DA.Date
import DA.Time
import qualified DA.Next.Set as Set

import Script.Factoring
import Script.Factoring.Tests
import Script.Factoring.Setup

doTestBrokerPool : Bool -> LedgerParties -> Script ()
doTestBrokerPool wt lp@(LedgerParties operator public csd buyer1 buyer2 seller1 seller2 exchange broker) = do
  doSetupFactoring wt lp

  let usdTokenId = getUSDTokenID csd

  -- > Create invoice
  invoiceReqId <- seller1 `submit` exerciseByKeyCmd @Seller (operator, seller1) Seller_AddInvoice with
      payer = "Walmart"
      invoiceNumber = "SN3498JFF30Sg"
      amount = 1_000_000.0
      issueDate = date 2020 Dec 10
      dueDate = date 2020 Dec 25

  invoiceCid1 <- csd `submit` exerciseCmd invoiceReqId CreateInvoiceRequest_Accept with invoiceId = 1
  (Some invoice1) <- queryContractId @Invoice csd invoiceCid1

  -- > Create invoice
  invoiceReqId <- seller2 `submit` exerciseByKeyCmd @Seller (operator, seller2) Seller_AddInvoice with
      payer = "Target"
      invoiceNumber = "TG2394483"
      amount = 1_000_000.0
      issueDate = date 2020 Dec 10
      dueDate = date 2020 Dec 25

  invoiceCid2 <- csd `submit` exerciseCmd invoiceReqId CreateInvoiceRequest_Accept with invoiceId = 2
  (Some invoice2) <- queryContractId @Invoice csd invoiceCid2

  -- > send invoices to broker
  (removalCid1, invoiceReqId) <- seller1 `submit` exerciseByKeyCmd @BrokerCustomerSeller (broker,operator,seller1)
      BrokerCustomerSeller_SendInvoiceToBroker with invoice = invoice1
  csd `submit` exerciseCmd removalCid1 InvoiceRemovalRequest_Ack
  invoiceCid1 <- csd `submit` exerciseCmd invoiceReqId CreateInvoiceRequest_Accept with invoiceId = 3

  (removalCid2, invoiceReqId) <- seller2 `submit` exerciseByKeyCmd @BrokerCustomerSeller (broker,operator,seller2)
      BrokerCustomerSeller_SendInvoiceToBroker with invoice = invoice2
  csd `submit` exerciseCmd removalCid2 InvoiceRemovalRequest_Ack
  invoiceCid2 <- csd `submit` exerciseCmd invoiceReqId CreateInvoiceRequest_Accept with invoiceId = 4

  invoices <- mapA (fmap fromSome <$> queryContractId @Invoice broker) [invoiceCid1, invoiceCid2]
  createPoolRequestCid <- broker `submit` exerciseByKeyCmd @Broker (operator,broker)
    Broker_SendPoolToAuction with
      invoices
      minimumQuantity = 500_000.0
      minimumProceeds = 45_000.0
      bidIncrement = 50_000.0
      endDate = time (date 2020 Dec 15) 0 0 0
      dueDate = date 2020 Dec 15
      issueDate = date 2020 Dec 15
      invoiceNumber = "BN1203923"

  (_,auctionRequestCid) <- csd `submit` exerciseCmd createPoolRequestCid CreatePoolRequest_Accept with invoiceId = 5

  auctionId <- exchange `submit` exerciseCmd auctionRequestCid CreateAuctionRequest_Accept
  auction <- fromSome <$> queryContractId exchange auctionId

  awaitOrDo' wt 0.25 "exchange add observers"
    $ exchange `submit` exerciseByKeyCmd @Auction (key auction) Auction_AddObservers
        with newObservers = Set.fromList [buyer1, buyer2]
  --
  placeBidOnAuction wt lp auction buyer1 4.0 100_000.0 1
  placeBidOnAuction wt lp auction buyer2 4.0 100_000.0 2
  placeBidOnAuction wt lp auction buyer1 5.0 100_000.0 3
  placeBidOnAuction wt lp auction buyer2 5.0 100_000.0 4
  placeBidOnAuction wt lp auction buyer2 5.0 100_000.0 5
  placeBidOnAuction wt lp auction buyer2 5.0 100_000.0 6
  placeBidOnAuction wt lp auction buyer2 5.0 100_000.0 7

  debug "completing auction"
  awaitOrDo' wt 0.25 "completing auction"
    $ exchange `submit` exerciseByKeyCmd @Auction (key auction) Auction_End

  brokerDepositCid <- csd `submit` exerciseByKeyCmd @Custodian (operator, csd) Custodian_CreateDeposit with
      tokenId = (getTokenId csd "USD"), depositQuantity = 5000.0, beneficiary = broker
  depositTransferRequestCid <- broker `submit` exerciseByKeyCmd @BrokerCustomerSeller (broker, operator, seller1)
    BrokerCustomerSeller_TransferFundsToSeller with
      depositCids = [brokerDepositCid]
      transferQuantity = 3000.0

  csd `submit` exerciseCmd depositTransferRequestCid DepositTransferRequest_Approve

  -- (Some (invoiceCid1,_)) <-

  return ()

testBrokerPool : Script ()
testBrokerPool = allocateParties >>= doTestBrokerPool False

doTestBrokerSeller : Bool -> LedgerParties -> Script ()
doTestBrokerSeller wt lp@(LedgerParties operator public csd buyer1 buyer2 seller1 seller2 exchange broker) = do
  doSetupFactoring wt lp

  let usdTokenId = getUSDTokenID csd

  -- > Create invoice
  invoiceReqId <- seller1 `submit` exerciseByKeyCmd @Seller (operator, seller1) Seller_AddInvoice with
      payer = "Walmart"
      invoiceNumber = "SN3498JFF30Sg"
      amount = 1_000_000.0
      issueDate = date 2020 Dec 10
      dueDate = date 2020 Dec 25

  invoiceCid1 <- csd `submit` exerciseCmd invoiceReqId CreateInvoiceRequest_Accept with invoiceId = 1

  (Some invoice1) <- queryContractId @Invoice csd invoiceCid1

  -- > send invoices to broker
  (removalCid, invoiceReqId) <- seller1 `submit` exerciseByKeyCmd @BrokerCustomerSeller (broker,operator,seller1)
      BrokerCustomerSeller_SendInvoiceToBroker with invoice = invoice1
  invoiceCid1 <- csd `submit` exerciseCmd invoiceReqId CreateInvoiceRequest_Accept with invoiceId = 2
  csd `submit` exerciseCmd removalCid InvoiceRemovalRequest_Ack

  (auctionRequestCid, invoiceId) <- broker `submit` exerciseByKeyCmd @Invoice (csd,broker,2) Invoice_SendToAuction with
      minimumQuantity = 500_000.0
      minimumProceeds = 45_000.0     -- minimum proceeds for bidIncrement
      bidIncrement = 50_000.0
      endDate = time (date 2020 Dec 15) 0 0 0

  auctionId <- exchange `submit` exerciseCmd auctionRequestCid CreateAuctionRequest_Accept
  auction <- fromSome <$> queryContractId exchange auctionId

  awaitOrDo' wt 0.25 "exchange add observers"
    $ exchange `submit` exerciseByKeyCmd @Auction (key auction) Auction_AddObservers
        with newObservers = Set.fromList [buyer1, buyer2]
  --
  placeBidOnAuction wt lp auction buyer1 4.0 100_000.0 1
  placeBidOnAuction wt lp auction buyer2 4.0 100_000.0 2
  placeBidOnAuction wt lp auction buyer1 5.0 100_000.0 3
  placeBidOnAuction wt lp auction buyer2 5.0 100_000.0 4
  placeBidOnAuction wt lp auction buyer2 5.0 100_000.0 5
  placeBidOnAuction wt lp auction buyer2 5.0 100_000.0 6
  placeBidOnAuction wt lp auction buyer2 5.0 100_000.0 7

  debug "completing auction"
  awaitOrDo' wt 0.25 "completing auction"
    $ exchange `submit` exerciseByKeyCmd @Auction (key auction) Auction_End

  -- > Create invoice
  invoiceReqId <- seller2 `submit` exerciseByKeyCmd @Seller (operator, seller2) Seller_AddInvoice with
      payer = "Target"
      invoiceNumber = "TG2394483"
      amount = 1_000_000.0
      issueDate = date 2020 Dec 10
      dueDate = date 2020 Dec 25

  invoiceCid2 <- csd `submit` exerciseCmd invoiceReqId CreateInvoiceRequest_Accept with invoiceId = 3
  (Some invoice2) <- queryContractId @Invoice csd invoiceCid2

  -- > send invoices to broker
  (removalCid, invoiceReqId) <- seller2 `submit` exerciseByKeyCmd @BrokerCustomerSeller (broker,operator,seller2)
      BrokerCustomerSeller_SendInvoiceToBroker with invoice = invoice2
  invoiceCid2 <- csd `submit` exerciseCmd invoiceReqId CreateInvoiceRequest_Accept with invoiceId = 4
  csd `submit` exerciseCmd removalCid InvoiceRemovalRequest_Ack

  -- > Retrieve invoice from broker
  (Some invoice2) <- queryContractId @Invoice csd invoiceCid2
  (removalCid, invoiceReqId) <- seller2 `submit` exerciseByKeyCmd @BrokerCustomerSeller (broker,operator,seller2)
      BrokerCustomerSeller_RetrieveInvoiceFromBroker with invoice = invoice2
  csd `submit` exerciseCmd removalCid InvoiceRemovalRequest_Ack
  invoiceCid1 <- csd `submit` exerciseCmd invoiceReqId CreateInvoiceRequest_Accept with invoiceId = 5

  invoiceReqId <- broker `submit` exerciseByKeyCmd @Broker (operator, broker) Broker_AddInvoice with
      onBehalfOf = broker
      payer = "Walmart"
      invoiceNumber = "SN3498JFF30Sg"
      amount = 1_000_000.0
      issueDate = date 2020 Dec 10
      dueDate = date 2020 Dec 25
  csd `submit` exerciseCmd invoiceReqId CreateInvoiceRequest_Accept with invoiceId = 6


  return ()

testBrokerSeller : Script ()
testBrokerSeller = allocateParties >>= doTestBrokerSeller False

doTestBrokerBuyer : Bool -> LedgerParties -> Script ()
doTestBrokerBuyer wt lp@(LedgerParties operator public csd buyer1 buyer2 seller1 seller2 exchange broker) = do

  doSetupFactoring wt lp

  let usdTokenId = getUSDTokenID csd

  debug "creating invoice"

  let invoiceNumber = "SN3498JFF30Sg"

  auction <- createTestInvoiceAndAuction wt lp seller1 "FIFO Problems" 0

  -- broker `submit` exerciseByKeyCmd @BrokerCustomerBuyer (broker, operator, buyer1) BrokerCustomerBuyer_PlaceBid with
  --   auctionId = auction.id
  --   bidAmount = 95_000.0
  --   auctionAmount = 100_000.0
  return ()

testBrokerBuyer : Script ()
testBrokerBuyer = allocateParties >>= doTestBrokerBuyer False
