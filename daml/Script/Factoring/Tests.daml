module Script.Factoring.Tests where

import Daml.Script

import Marketplace.Trading
import Marketplace.Transfer

import Factoring.Seller
import Factoring.Buyer
import Factoring.Invoice
import Factoring.Utils

import DA.Optional
import DA.Date
import DA.Time
import qualified DA.Next.Set as Set

import Script.Factoring
import Script.Factoring.Setup

testCreateInvoice : Script ()
testCreateInvoice = allocateParties >>= doTestCreateInvoice False

doTestCreateInvoice : Bool -> LedgerParties -> Script ()
doTestCreateInvoice wt lp@(LedgerParties operator public csd buyer1 buyer2 seller1 seller2 exchange broker) = do
  doSetupFactoring wt lp

  -- > Create invoice
  invoiceReqId <- seller1 `submit` exerciseByKeyCmd @Seller (operator, seller1) Seller_AddInvoice with
      payer = "Walmart"
      invoiceNumber = "SN3498JFF30Sg"
      amount = 100_000.0
      issueDate = date 2020 Dec 10
      dueDate = date 2020 Dec 25

  invoiceId <- csd `submit` exerciseCmd invoiceReqId CreateInvoiceRequest_Accept with invoiceId = 9999

  -- > Send invoice to auction

  (auctionRequestCid, invoiceId) <- seller1 `submit` exerciseCmd invoiceId Invoice_SendToAuction with
      minimumQuantity = 50_000.0
      minimumProceeds = 900.0
      bidIncrement = 1000.0
      endDate = time (date 2020 Dec 15) 0 0 0

  exchange `submit` exerciseCmd auctionRequestCid CreateAuctionRequest_Accept

  return ()

createTestInvoiceAndAuction : Bool -> LedgerParties -> Party -> Text -> Int -> Script Auction
createTestInvoiceAndAuction wt LedgerParties{userAdmin = operator, ..} seller name invoiceId = do
  -- > Create invoice
  invoiceReqId <- seller `submit` exerciseByKeyCmd @Seller (operator, seller) Seller_AddInvoice with
      payer = name
      invoiceNumber = name
      amount = 1_000_000.0
      issueDate = date 2020 Dec 10
      dueDate = date 2020 Dec 25

  awaitOrDo' wt 0.25 "accept invoice request"
    $ csd `submit` exerciseCmd invoiceReqId CreateInvoiceRequest_Accept with invoiceId = invoiceId + 9000

  debug "sending invoice to auction"
  (auctionRequestCid, invoiceId) <- seller `submit` exerciseByKeyCmd @Invoice (csd,seller,(invoiceId + 9000)) Invoice_SendToAuction with
      minimumQuantity = 750_000.0
      minimumProceeds = 45_000.0     -- minimum proceeds for bidIncrement
      bidIncrement = 50_000.0
      endDate = time (date 2020 Dec 15) 0 0 0

  (Some invoice) <- queryContractId @Invoice exchange invoiceId
  let auctionId = makeInvoiceAssetId exchange [invoice]

  -- > Exchange Accepts auction request
  awaitOrDo' wt 0.25 "accept auciton request"
    $ exchange `submit` exerciseCmd auctionRequestCid CreateAuctionRequest_Accept

  awaitOrDo' wt 0.25 "exchange add observers"
    $ exchange `submit` exerciseByKeyCmd @Auction auctionId Auction_AddObservers
        with newObservers = Set.fromList [buyer1, buyer2, broker]

  (Some (_,auction)) <- queryContractKey @Auction exchange auctionId

  return auction

placeBidOnAuction : Bool -> LedgerParties -> Auction -> Party ->  Decimal -> Decimal -> Int -> Script ()
placeBidOnAuction wt LedgerParties{userAdmin = operator, exchange, csd} auction buyer discountRate amount orderId = do
  let bidAmount = ((100.0 - discountRate) / 100.0) * amount

  exchDepositReqCid <- buyer `submit` exerciseByKeyCmd @Buyer (operator, buyer) Buyer_RequestDeposit
      with amount = bidAmount
  depositCid <- csd `submit` exerciseCmd exchDepositReqCid CreateExchangeDepositRequest_Accept

  (Right (depositDebitRequestCid, createBidRequestCid)) <- buyer `submit` exerciseByKeyCmd @Buyer (operator, buyer) Buyer_PlaceBid with
        auctionId = auction.id
        depositCids = [depositCid]
        auctionAmount = amount, ..

  awaitOrDo' wt 0.25 ("accept debit request")
    $ csd `submit` exerciseCmd depositDebitRequestCid DepositDebitRequest_Approve
  awaitOrDo' wt 0.25 ("accept order request " <> show (orderId + 9000))
    $ exchange `submit` exerciseCmd createBidRequestCid CreateBidRequest_Ack with orderId = orderId + 9000

  -- exchangeHandleOrderRequest exchange orderRequestCid1 (orderId + 9000)


doTestBuyerFlow : Bool -> LedgerParties -> Script ()
doTestBuyerFlow wt lp@(LedgerParties operator public csd buyer1 buyer2 seller1 seller2 exchange broker) = do
  doSetupFactoring wt lp

  let usdTokenId = getUSDTokenID csd

  debug "creating invoice"

  let invoiceNumber = "SN3498JFF30Sg"

  auction <- createTestInvoiceAndAuction wt lp seller1 "FIFO Problems" 0
  placeBidOnAuction wt lp auction buyer1 4.0 100_000.0 1
  placeBidOnAuction wt lp auction buyer2 4.0 100_000.0 2
  placeBidOnAuction wt lp auction buyer1 5.0 100_000.0 3
  placeBidOnAuction wt lp auction buyer2 5.0 100_000.0 4
  placeBidOnAuction wt lp auction buyer1 6.0 1_000_000.0 5
  placeBidOnAuction wt lp auction buyer1 6.0 100_000.0 6

  debug "completing auction"
  awaitOrDo' wt 0.25 "completing auction"
    $ exchange `submit` exerciseByKeyCmd @Auction (key auction) Auction_End

  -- auction <- createTestInvoiceAndAuction wt lp seller1 "Threshold Problems" 1
  -- placeBidOnAuction wt lp auction buyer1 4.0 100_000.0 7
  -- placeBidOnAuction wt lp auction buyer2 5.0 100_000.0 8
  -- placeBidOnAuction wt lp auction buyer1 10.0 600_000.0 9
  -- placeBidOnAuction wt lp auction buyer2 11.0 100_000.0 10

  -- awaitOrDo' wt 0.25 "completing auction"
  --   $ exchange `submit` exerciseByKeyCmd @Auction (key auction) Auction_End

  -- auction <- createTestInvoiceAndAuction wt lp seller1 "Total invoice problems" 2
  -- placeBidOnAuction wt lp auction buyer1 4.0 100_000.0 11
  -- placeBidOnAuction wt lp auction buyer2 5.0 100_000.0 12
  -- placeBidOnAuction wt lp auction buyer1 10.0 1_000_000.0 13

  -- awaitOrDo' wt 0.25 "completing auction"
  --   $ exchange `submit` exerciseByKeyCmd @Auction (key auction) Auction_End

  -- auction <- createTestInvoiceAndAuction wt lp seller1 "Oddlots problems" 3
  -- placeBidOnAuction wt lp auction buyer1 15.0 1_000_000.0 14
  -- placeBidOnAuction wt lp auction buyer2 15.0 250_000.0 15
  -- -- placeBidOnAuction wt lp auction buyer1 6.0 59_000.0 16 : assert is bad

  -- awaitOrDo' wt 0.25 "completing auction"
  --   $ exchange `submit` exerciseByKeyCmd @Auction (key auction) Auction_End

  return ()

testBuyerFlow : Script ()
testBuyerFlow = allocateParties >>= doTestBuyerFlow False
--
-- exchangeHandleOrderCancel : Party -> ContractId OrderCancelRequest -> Script (ContractId Auction)
-- exchangeHandleOrderCancel exchange cancelRequestCid = do
--   (Some cancelRequest) <- queryContractId @OrderCancelRequest exchange cancelRequestCid
--   let order = cancelRequest.order
--   (auctionCid,auction) <- fromSome <$> queryContractKey @Auction exchange order.pair._1
--   (bidCid,bid) <- fromSome <$> queryContractKey @Bid exchange (exchange,order.orderId)
--   newAuctionCid <- exchange `submit` exerciseCmd auctionCid Auction_RemoveBid with bidCid
--   -- exchange `submit` archiveCmd bidCid
--   exchange `submit` exerciseCmd cancelRequestCid OrderCancel_Ack
--   return newAuctionCid

-- exchangeHandleOrderRequest : Party -> ContractId OrderRequest -> Int -> Script (ContractId Auction)
-- exchangeHandleOrderRequest exchange orderRequestCid orderId = do
--   (Some orderRequest) <- queryContractId @OrderRequest exchange orderRequestCid
--   let order = orderRequest.order
--
--   exchange `submit` exerciseCmd orderRequestCid OrderRequest_Ack with orderId
--
--   -- > Create a 'Bid'
--   (auctionCid,auction) <- fromSome <$> queryContractKey @Auction exchange order.pair._1
--   (_,newAuctionCid) <- exchange `submit` exerciseCmd auctionCid Auction_AddBid with
--         addBuyer = order.exchParticipant
--         addPrice = order.price
--         addAmount = order.qty
--         orderId
--   return newAuctionCid
