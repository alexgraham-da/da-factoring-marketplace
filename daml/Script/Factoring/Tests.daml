module Script.Factoring.Tests where

import Daml.Script

import Marketplace.Trading
import Marketplace.Custodian

import Factoring.Seller
import Factoring.Buyer
import Factoring.Invoice
import Factoring.Utils

import DA.Either
import DA.Optional
import DA.Date
import DA.Time
import qualified DA.Next.Set as Set

import Script.Factoring
import Script.Factoring.Setup

testCreateInvoice : Script ()
testCreateInvoice = allocateParties >>= doTestCreateInvoice False

doTestCreateInvoice : Bool -> LedgerParties -> Script ()
doTestCreateInvoice wt lp@(LedgerParties operator public csd buyer1 buyer2 seller1 seller2 exchange broker) = do
  doSetupFactoring wt lp

  -- > Create invoice
  invoiceReqId <- seller1 `submit` exerciseByKeyCmd @Seller (operator, seller1) Seller_AddInvoice with
      payer = "Walmart"
      invoiceNumber = "SN3498JFF30Sg"
      amount = 100_000.0
      issueDate = date 2020 Dec 10
      dueDate = date 2020 Dec 25

  invoiceId <- csd `submit` exerciseCmd invoiceReqId CreateInvoiceRequest_Accept

  -- > Send invoice to auction

  (auctionRequestCid, invoiceId) <- seller1 `submit` exerciseCmd invoiceId Invoice_SendToAuction with
      minimumQuantity = 5000.0
      minimumProceeds = 1000.0
      bidIncrement = 0.05
      endDate = time (date 2020 Dec 15) 0 0 0

  exchange `submit` exerciseCmd auctionRequestCid CreateAuctionRequest_Accept

  return ()

doTestBuyerFlow : Bool -> LedgerParties -> Script ()
doTestBuyerFlow wt lp@(LedgerParties operator public csd buyer1 buyer2 seller1 seller2 exchange broker) = do
  doSetupFactoring wt lp

  let usdTokenId = getUSDTokenID csd

  debug "creating invoice"

  let invoiceNumber = "SN3498JFF30Sg"

  -- > Create invoice
  invoiceReqId <- seller1 `submit` exerciseByKeyCmd @Seller (operator, seller1) Seller_AddInvoice with
      payer = "Walmart"
      invoiceNumber
      amount = 10_000_000_000.0
      issueDate = date 2020 Dec 10
      dueDate = date 2020 Dec 25

  awaitOrDo' wt 0.25 "accept invoice request"
    $ csd `submit` exerciseCmd invoiceReqId CreateInvoiceRequest_Accept

  -- > Send invoice to auction

  debug "sending invoice to auction"
  (auctionRequestCid, invoiceId) <- seller1 `submit` exerciseByKeyCmd @Invoice (csd,seller1,invoiceNumber) Invoice_SendToAuction with
      minimumQuantity = 10000.0
      minimumProceeds = 100000.0
      bidIncrement = 0.05
      endDate = time (date 2020 Dec 15) 0 0 0

  (Some invoice) <- queryContractId @Invoice exchange invoiceId
  let auctionId = makeInvoiceAssetId exchange [invoice]

  -- > Exchange Accepts auction request
  awaitOrDo' wt 0.25 "accept auciton request"
    $ exchange `submit` exerciseCmd auctionRequestCid CreateAuctionRequest_Accept

  awaitOrDo' wt 0.25 "exchange add observers"
    $ exchange `submit` exerciseByKeyCmd @Auction auctionId Auction_AddObservers
        with newObservers = Set.fromList [buyer1, buyer2]

  (Some (_,auction)) <- queryContractKey @Auction exchange auctionId

  (Right orderRequestCid1) <- buyer1 `submit` exerciseByKeyCmd @Buyer (operator, buyer1) Buyer_PlaceBid with
        auctionId = auction.id
        bidAmount = 6_000_000.0
        auctionAmount = 100_000_000.0
        -- bidAmount = 9_094_034.0
        -- auctionAmount = 10_000_000.0
  awaitOrDo' wt 0.25 "accept order request 1" $ exchangeHandleOrderRequest exchange orderRequestCid1 1

  (Right orderRequestCid2) <- buyer1 `submit` exerciseByKeyCmd @Buyer (operator, buyer1) Buyer_PlaceBid with
        auctionId = auction.id
        bidAmount = 99_345_234.0
        auctionAmount = 100_000_000.0
  awaitOrDo' wt 0.25 "accept order request 2" $ exchangeHandleOrderRequest exchange orderRequestCid2 2

  bidResponse <- buyer1 `submit` exerciseByKeyCmd @Buyer (operator, buyer1) Buyer_PlaceBid with
        auctionId = auction.id
        bidAmount = 10000000000000000.0
        auctionAmount = 50.0

  assertMsg "bid should have failed" $ isLeft bidResponse

  (Right orderRequestCid3) <- buyer2 `submit` exerciseByKeyCmd @Buyer (operator, buyer2) Buyer_PlaceBid with
        auctionId = auction.id
        bidAmount = 400.0
        auctionAmount = 50_000.0
  awaitOrDo' wt 0.25 "accept order request 3" $ exchangeHandleOrderRequest exchange orderRequestCid3 3

  (Right orderRequestCid4) <- buyer2 `submit` exerciseByKeyCmd @Buyer (operator, buyer2) Buyer_PlaceBid with
        auctionId = auction.id
        bidAmount = 800.0
        auctionAmount = 1000.0

  awaitOrDo' wt 0.25 "accept order request 4" $ exchangeHandleOrderRequest exchange orderRequestCid4 4
  -- (newOrderRequestCid, auctionCid) <- buyer1 `submit` exerciseByKeyCmd @Bid (exchange, 1) Bid_UpdateBid with newPrice = 0.03, newAmount = 100.0

  (Some (_,bid1)) <- queryContractKey @Bid buyer1 (exchange,1)
  -- (newOrderCancelRequestCid, Right orderRequestCid) <- buyer1 `submit` exerciseByKeyCmd @Buyer (operator, buyer1) Buyer_UpdateBid with bid = bid1, newPrice = 0.03, newAmount = 100.0
  (newOrderCancelRequestCid) <- buyer1 `submit` exerciseByKeyCmd @Buyer (operator, buyer1) Buyer_CancelBid with bid = bid1
  awaitOrDo' wt 0.25 "handle cancel request" $  exchangeHandleOrderCancel exchange newOrderCancelRequestCid

  debug "completing auction"
  completedAuctionCid <- exchange `submit` exerciseByKeyCmd @Auction (key auction) Auction_End


  return ()

testBuyerFlow : Script ()
testBuyerFlow = allocateParties >>= doTestBuyerFlow False

exchangeHandleOrderCancel : Party -> ContractId OrderCancelRequest -> Script (ContractId Auction)
exchangeHandleOrderCancel exchange cancelRequestCid = do
  (Some cancelRequest) <- queryContractId @OrderCancelRequest exchange cancelRequestCid
  let order = cancelRequest.order
  (auctionCid,auction) <- fromSome <$> queryContractKey @Auction exchange order.pair._1
  (bidCid,bid) <- fromSome <$> queryContractKey @Bid exchange (exchange,order.orderId)
  newAuctionCid <- exchange `submit` exerciseCmd auctionCid Auction_RemoveBid with bidCid
  -- exchange `submit` archiveCmd bidCid
  exchange `submit` exerciseCmd cancelRequestCid OrderCancel_Ack
  return newAuctionCid

exchangeHandleOrderRequest : Party -> ContractId OrderRequest -> Int -> Script (ContractId Auction)
exchangeHandleOrderRequest exchange orderRequestCid orderId = do
  (Some orderRequest) <- queryContractId @OrderRequest exchange orderRequestCid
  let order = orderRequest.order

  exchange `submit` exerciseCmd orderRequestCid OrderRequest_Ack with orderId

  -- > Create a 'Bid'
  (auctionCid,auction) <- fromSome <$> queryContractKey @Auction exchange order.pair._1
  (_,newAuctionCid) <- exchange `submit` exerciseCmd auctionCid Auction_AddBid with
        addBuyer = order.exchParticipant
        addPrice = order.price
        addAmount = order.qty
        orderId
  return newAuctionCid
