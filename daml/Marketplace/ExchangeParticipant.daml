module Marketplace.ExchangeParticipant where

import Marketplace.BinaryOption
import Marketplace.Notification
import Marketplace.Trading
import Marketplace.Token
import Marketplace.Utils

import DA.Finance.Asset

template ExchangeParticipantInvitation
  with
    operator : Party
    exchange : Party
    exchParticipant : Party
  where
    signatory exchange

    controller exchParticipant can
      ExchangeParticipantInvitation_Accept : ContractId ExchangeParticipant
        do
          create DismissibleNotification with
            sender = exchParticipant, senderRole = None
            receiver = exchange, text = "Exchange invitation accepted."
          create ExchangeParticipant with ..

      ExchangeParticipantInvitation_Reject : ()
        do
          create DismissibleNotification with
            sender = exchParticipant, senderRole = None
            receiver = exchange, text = "Exchange invitation rejected."
          return ()

template ExchangeParticipant
  with
    operator : Party
    exchange : Party
    exchParticipant : Party
  where
    signatory exchange, exchParticipant

    key (exchange, operator, exchParticipant) : (Party, Party, Party)
    maintainer key._1

    controller exchParticipant can

      nonconsuming ExchangeParticipant_PlaceBinaryOptionOrder : ContractId OrderRequest
        with
          depositCid : ContractId AssetDeposit
          binOption : IdPair
          price : Decimal
          qty : Decimal
          isBid : Bool
        do
          deposit <- fetch depositCid
          assertMsg "deposit is not allocated to the exchange"
            $ deposit.account.id.label == getAccountLabel exchParticipant exchange
          assertMsg ("deposit should be for " <> binOption._2.label <> " but it is for " <> deposit.asset.id.label)
            $ binOption._2 == deposit.asset.id
          (_, quoteToken) <- fetchByKey @Token binOption._2
          assertMsg ("price should be rounded to at most " <> show quoteToken.quantityPrecision <> " decimal places")
            $ roundBankers quoteToken.quantityPrecision price == price
          (_, binaryOption) <- fetchByKey @BinaryOption binOption._1
          assertMsg ("price should be between " <> show binaryOption.minPrice <> " and " <> show binaryOption.maxPrice)
            $ (price >= binaryOption.minPrice && price <= binaryOption.maxPrice)
          let requiredDepositAmount = if isBid then qty * price else qty * (binaryOption.maxPrice - price)
          assertMsg ("deposit should be for at least " <> show requiredDepositAmount <> " " <> deposit.asset.id.label)
            $ (deposit.asset.quantity >= requiredDepositAmount)
          if requiredDepositAmount < deposit.asset.quantity then do
            [splitCid, restCid] <- exercise depositCid AssetDeposit_Split with quantities = [requiredDepositAmount]
            let order = Order with status = "New", orderId = -1, pair = binOption, depositCid = splitCid, ..
            create OrderRequest with ..
          else do
            let order = Order with status = "New", orderId = -1, pair = binOption, ..
            create OrderRequest with ..

      nonconsuming ExchangeParticipant_PlaceBid : ContractId OrderRequest
        with
          depositCid : ContractId AssetDeposit
          pair : IdPair
          price : Decimal
        do
          deposit <- fetch depositCid
          assertMsg "deposit is not allocated to the exchange"
            $ deposit.account.id.label == getAccountLabel exchParticipant exchange
          assertMsg ("deposit should be for " <> pair._2.label <> " but it is for " <> deposit.asset.id.label)
            $ pair._2 == deposit.asset.id
          (_, quoteToken) <- fetchByKey @Token pair._2
          assertMsg ("price should be rounded to at most " <> show quoteToken.quantityPrecision <> " decimal places")
            $ roundBankers quoteToken.quantityPrecision price == price
          (_, baseToken) <- fetchByKey @Token pair._1
          let qty = roundBankers baseToken.quantityPrecision $ deposit.asset.quantity / price
              order = Order with isBid = True, status = "New", orderId = -1, ..
          create OrderRequest with ..

      nonconsuming ExchangeParticipant_PlaceOffer : ContractId OrderRequest
        with
          depositCid : ContractId AssetDeposit
          pair : IdPair
          price : Decimal
        do
          deposit <- fetch depositCid
          assertMsg "deposit is not allocated to the exchange"
            $ deposit.account.id.label == getAccountLabel exchParticipant exchange
          assertMsg ("deposit should be for " <> pair._1.label <> " but it is for " <> deposit.asset.id.label)
            $ pair._1 == deposit.asset.id
          (_, quoteToken) <- fetchByKey @Token pair._2
          assertMsg ("price should be rounded to at most " <> show quoteToken.quantityPrecision <> " decimal places")
            $ roundBankers quoteToken.quantityPrecision price == price
          (_, baseToken) <- fetchByKey @Token pair._1
          let qty = roundBankers baseToken.quantityPrecision deposit.asset.quantity
              order = Order with isBid = False, status = "New", orderId = -1, ..
          create OrderRequest with ..
